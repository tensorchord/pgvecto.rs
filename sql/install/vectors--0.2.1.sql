-- bootstrap begin

-- List of shell types

CREATE TYPE vector;
CREATE TYPE vecf16;
CREATE TYPE vector_index_stat;

-- bootstrap end

/* 
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/

-- src/datatype/vecf32.rs:316
-- vectors::datatype::vecf32::_vectors_vecf32_out
CREATE  FUNCTION vectors."_vectors_vecf32_out"(
    "vector" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_out_wrapper';

-- src/datatype/operators_f32.rs:101
-- vectors::datatype::operators_f32::_vectors_vecf32_operator_neq
CREATE  FUNCTION vectors."_vectors_vecf32_operator_neq"(
    "lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_neq_wrapper';

-- src/datatype/operators_f32.rs:24
-- vectors::datatype::operators_f32::_vectors_vecf32_operator_minus
CREATE  FUNCTION vectors."_vectors_vecf32_operator_minus"(
    "lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS vector /* vectors::datatype::vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_minus_wrapper';

-- src/datatype/operators_f32.rs:53
-- vectors::datatype::operators_f32::_vectors_vecf32_operator_lte
CREATE  FUNCTION vectors."_vectors_vecf32_operator_lte"(
    "lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_lte_wrapper';

-- src/datatype/operators_f32.rs:41
-- vectors::datatype::operators_f32::_vectors_vecf32_operator_lt
CREATE  FUNCTION vectors."_vectors_vecf32_operator_lt"(
    "lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_lt_wrapper';

-- src/datatype/operators_f32.rs:137
-- vectors::datatype::operators_f32::_vectors_vecf32_operator_l2
CREATE  FUNCTION vectors."_vectors_vecf32_operator_l2"(
    "lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_l2_wrapper';

-- src/datatype/operators_f32.rs:77
-- vectors::datatype::operators_f32::_vectors_vecf32_operator_gte
CREATE  FUNCTION vectors."_vectors_vecf32_operator_gte"(
    "lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_gte_wrapper';

-- src/datatype/operators_f32.rs:65
-- vectors::datatype::operators_f32::_vectors_vecf32_operator_gt
CREATE  FUNCTION vectors."_vectors_vecf32_operator_gt"(
    "lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_gt_wrapper';

-- src/datatype/operators_f32.rs:89
-- vectors::datatype::operators_f32::_vectors_vecf32_operator_eq
CREATE  FUNCTION vectors."_vectors_vecf32_operator_eq"(
    "lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_eq_wrapper';

-- src/datatype/operators_f32.rs:125
-- vectors::datatype::operators_f32::_vectors_vecf32_operator_dot
CREATE  FUNCTION vectors."_vectors_vecf32_operator_dot"(
    "lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_dot_wrapper';

-- src/datatype/operators_f32.rs:113
-- vectors::datatype::operators_f32::_vectors_vecf32_operator_cosine
CREATE  FUNCTION vectors."_vectors_vecf32_operator_cosine"(
    "lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_cosine_wrapper';

-- src/datatype/operators_f32.rs:7
-- vectors::datatype::operators_f32::_vectors_vecf32_operator_add
CREATE  FUNCTION vectors."_vectors_vecf32_operator_add"(
    "lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS vector /* vectors::datatype::vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_add_wrapper';

-- src/datatype/vecf32.rs:252
-- vectors::datatype::vecf32::_vectors_vecf32_in
CREATE  FUNCTION vectors."_vectors_vecf32_in"(
    "input" cstring, /* &core::ffi::c_str::CStr */
    "_oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
    "typmod" INT /* i32 */
) RETURNS vector /* vectors::datatype::vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_in_wrapper';

-- src/datatype/vecf16.rs:316
-- vectors::datatype::vecf16::_vectors_vecf16_out
CREATE  FUNCTION vectors."_vectors_vecf16_out"(
    "vector" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_out_wrapper';

-- src/datatype/operators_f16.rs:101
-- vectors::datatype::operators_f16::_vectors_vecf16_operator_neq
CREATE  FUNCTION vectors."_vectors_vecf16_operator_neq"(
    "lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
    "rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_neq_wrapper';

-- src/datatype/operators_f16.rs:24
-- vectors::datatype::operators_f16::_vectors_vecf16_operator_minus
CREATE  FUNCTION vectors."_vectors_vecf16_operator_minus"(
    "lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
    "rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS vecf16 /* vectors::datatype::vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_minus_wrapper';

-- src/datatype/operators_f16.rs:53
-- vectors::datatype::operators_f16::_vectors_vecf16_operator_lte
CREATE  FUNCTION vectors."_vectors_vecf16_operator_lte"(
    "lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
    "rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_lte_wrapper';

-- src/datatype/operators_f16.rs:41
-- vectors::datatype::operators_f16::_vectors_vecf16_operator_lt
CREATE  FUNCTION vectors."_vectors_vecf16_operator_lt"(
    "lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
    "rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_lt_wrapper';

-- src/datatype/operators_f16.rs:137
-- vectors::datatype::operators_f16::_vectors_vecf16_operator_l2
CREATE  FUNCTION vectors."_vectors_vecf16_operator_l2"(
    "lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
    "rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_l2_wrapper';

-- src/datatype/operators_f16.rs:77
-- vectors::datatype::operators_f16::_vectors_vecf16_operator_gte
CREATE  FUNCTION vectors."_vectors_vecf16_operator_gte"(
    "lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
    "rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_gte_wrapper';

-- src/datatype/operators_f16.rs:65
-- vectors::datatype::operators_f16::_vectors_vecf16_operator_gt
CREATE  FUNCTION vectors."_vectors_vecf16_operator_gt"(
    "lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
    "rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_gt_wrapper';

-- src/datatype/operators_f16.rs:89
-- vectors::datatype::operators_f16::_vectors_vecf16_operator_eq
CREATE  FUNCTION vectors."_vectors_vecf16_operator_eq"(
    "lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
    "rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_eq_wrapper';

-- src/datatype/operators_f16.rs:125
-- vectors::datatype::operators_f16::_vectors_vecf16_operator_dot
CREATE  FUNCTION vectors."_vectors_vecf16_operator_dot"(
    "lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
    "rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_dot_wrapper';

-- src/datatype/operators_f16.rs:113
-- vectors::datatype::operators_f16::_vectors_vecf16_operator_cosine
CREATE  FUNCTION vectors."_vectors_vecf16_operator_cosine"(
    "lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
    "rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_cosine_wrapper';

-- src/datatype/operators_f16.rs:7
-- vectors::datatype::operators_f16::_vectors_vecf16_operator_add
CREATE  FUNCTION vectors."_vectors_vecf16_operator_add"(
    "lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
    "rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS vecf16 /* vectors::datatype::vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_add_wrapper';

-- src/datatype/vecf16.rs:252
-- vectors::datatype::vecf16::_vectors_vecf16_in
CREATE  FUNCTION vectors."_vectors_vecf16_in"(
    "input" cstring, /* &core::ffi::c_str::CStr */
    "_oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
    "typmod" INT /* i32 */
) RETURNS vecf16 /* vectors::datatype::vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_in_wrapper';

-- src/datatype/typmod.rs:71
-- vectors::datatype::typmod::_vectors_typmod_out
CREATE  FUNCTION vectors."_vectors_typmod_out"(
    "typmod" INT /* i32 */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_typmod_out_wrapper';

-- src/datatype/typmod.rs:56
-- vectors::datatype::typmod::_vectors_typmod_in
CREATE  FUNCTION vectors."_vectors_typmod_in"(
    "list" cstring[] /* pgrx::datum::array::Array<&core::ffi::c_str::CStr> */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_typmod_in_wrapper';

-- src/index/functions.rs:4
-- vectors::index::functions::_vectors_pgvectors_upgrade
CREATE  FUNCTION vectors."_vectors_pgvectors_upgrade"() RETURNS void
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_pgvectors_upgrade_wrapper';

-- src/index/views.rs:5
-- vectors::index::views::_vectors_index_stat
CREATE  FUNCTION vectors."_vectors_index_stat"(
    "oid" oid /* pgrx_pg_sys::submodules::oids::Oid */
) RETURNS vector_index_stat /* pgrx::heap_tuple::PgHeapTuple<pgrx::pgbox::AllocatedByRust> */
STRICT VOLATILE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_index_stat_wrapper';

-- src/datatype/casts_f32.rs:36
-- vectors::datatype::casts_f32::_vectors_cast_vecf32_to_vecf16
CREATE  FUNCTION vectors."_vectors_cast_vecf32_to_vecf16"(
    "vector" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "_typmod" INT, /* i32 */
    "_explicit" bool /* bool */
) RETURNS vecf16 /* vectors::datatype::vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_vecf32_to_vecf16_wrapper';

-- src/datatype/casts_f32.rs:27
-- vectors::datatype::casts_f32::_vectors_cast_vecf32_to_array
CREATE  FUNCTION vectors."_vectors_cast_vecf32_to_array"(
    "vector" vector, /* vectors::datatype::vecf32::Vecf32Input */
    "_typmod" INT, /* i32 */
    "_explicit" bool /* bool */
) RETURNS real[] /* alloc::vec::Vec<f32> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_vecf32_to_array_wrapper';

-- src/datatype/casts_f32.rs:9
-- vectors::datatype::casts_f32::_vectors_cast_array_to_vecf32
CREATE  FUNCTION vectors."_vectors_cast_array_to_vecf32"(
    "array" real[], /* pgrx::datum::array::Array<f32> */
    "typmod" INT, /* i32 */
    "_explicit" bool /* bool */
) RETURNS vector /* vectors::datatype::vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_array_to_vecf32_wrapper';

-- src/index/am.rs:35
-- vectors::index::am::_vectors_amhandler
CREATE FUNCTION _vectors_amhandler(internal) RETURNS index_am_handler
IMMUTABLE STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_amhandler_wrapper';



-- src/embedding/udf.rs:8
-- vectors::embedding::udf::_vectors_ai_embedding_vector
CREATE  FUNCTION vectors."_vectors_ai_embedding_vector"(
    "input" TEXT /* alloc::string::String */
) RETURNS vector /* vectors::datatype::vecf32::Vecf32Output */
STRICT VOLATILE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_ai_embedding_vector_wrapper';

-- finalize begin

-- List of data types

CREATE TYPE vector (
    INPUT = _vectors_vecf32_in,
    OUTPUT = _vectors_vecf32_out,
    TYPMOD_IN = _vectors_typmod_in,
    TYPMOD_OUT = _vectors_typmod_out,
    STORAGE = EXTENDED,
    INTERNALLENGTH = VARIABLE,
    ALIGNMENT = double
);

CREATE TYPE vecf16 (
    INPUT = _vectors_vecf16_in,
    OUTPUT = _vectors_vecf16_out,
    TYPMOD_IN = _vectors_typmod_in,
    TYPMOD_OUT = _vectors_typmod_out,
    STORAGE = EXTENDED,
    INTERNALLENGTH = VARIABLE,
    ALIGNMENT = double
);

CREATE TYPE vector_index_stat AS (
    idx_status TEXT,
    idx_indexing BOOL,
    idx_tuples BIGINT,
    idx_sealed BIGINT[],
    idx_growing BIGINT[],
    idx_write BIGINT,
    idx_size BIGINT,
    idx_options TEXT
);

-- List of operators

CREATE OPERATOR + (
    PROCEDURE = _vectors_vecf32_operator_add,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = +
);

CREATE OPERATOR + (
    PROCEDURE = _vectors_vecf16_operator_add,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = +
);

CREATE OPERATOR - (
    PROCEDURE = _vectors_vecf32_operator_minus,
    LEFTARG = vector,
    RIGHTARG = vector
);

CREATE OPERATOR - (
    PROCEDURE = _vectors_vecf16_operator_minus,
    LEFTARG = vecf16,
    RIGHTARG = vecf16
);

CREATE OPERATOR = (
    PROCEDURE = _vectors_vecf32_operator_eq,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = =,
    NEGATOR = <>,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR = (
    PROCEDURE = _vectors_vecf16_operator_eq,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = =,
    NEGATOR = <>,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR <> (
    PROCEDURE = _vectors_vecf32_operator_neq,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = <>,
    NEGATOR = =,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR <> (
    PROCEDURE = _vectors_vecf16_operator_neq,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = <>,
    NEGATOR = =,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR < (
    PROCEDURE = _vectors_vecf32_operator_lt,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR < (
    PROCEDURE = _vectors_vecf16_operator_lt,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR > (
    PROCEDURE = _vectors_vecf32_operator_gt,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR > (
    PROCEDURE = _vectors_vecf16_operator_gt,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR <= (
    PROCEDURE = _vectors_vecf32_operator_lte,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR <= (
    PROCEDURE = _vectors_vecf16_operator_lte,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR >= (
    PROCEDURE = _vectors_vecf32_operator_gte,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR >= (
    PROCEDURE = _vectors_vecf16_operator_gte,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR <-> (
    PROCEDURE = _vectors_vecf32_operator_l2,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = <->
);

CREATE OPERATOR <-> (
    PROCEDURE = _vectors_vecf16_operator_l2,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = <->
);

CREATE OPERATOR <#> (
    PROCEDURE = _vectors_vecf32_operator_dot,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = <#>
);

CREATE OPERATOR <#> (
    PROCEDURE = _vectors_vecf16_operator_dot,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = <#>
);

CREATE OPERATOR <=> (
    PROCEDURE = _vectors_vecf32_operator_cosine,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = <=>
);

CREATE OPERATOR <=> (
    PROCEDURE = _vectors_vecf16_operator_cosine,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = <=>
);

-- List of functions

CREATE FUNCTION pgvectors_upgrade() RETURNS void
IMMUTABLE STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_pgvectors_upgrade_wrapper';

-- List of casts

CREATE CAST (real[] AS vector)
    WITH FUNCTION _vectors_cast_array_to_vecf32(real[], integer, boolean) AS IMPLICIT;

CREATE CAST (vector AS real[])
    WITH FUNCTION _vectors_cast_vecf32_to_array(vector, integer, boolean) AS IMPLICIT;

CREATE CAST (vector AS vecf16)
    WITH FUNCTION _vectors_cast_vecf32_to_vecf16(vector, integer, boolean);

-- List of access methods

CREATE ACCESS METHOD vectors TYPE INDEX HANDLER _vectors_amhandler;
COMMENT ON ACCESS METHOD vectors IS 'pgvecto.rs index access method';

-- List of operator families

CREATE OPERATOR FAMILY vector_l2_ops USING vectors;

CREATE OPERATOR FAMILY vector_dot_ops USING vectors;

CREATE OPERATOR FAMILY vector_cos_ops USING vectors;

CREATE OPERATOR FAMILY vecf16_l2_ops USING vectors;

CREATE OPERATOR FAMILY vecf16_dot_ops USING vectors;

CREATE OPERATOR FAMILY vecf16_cos_ops USING vectors;

-- List of operator classes

CREATE OPERATOR CLASS vector_l2_ops
    FOR TYPE vector USING vectors AS
    OPERATOR 1 <-> (vector, vector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vector_dot_ops
    FOR TYPE vector USING vectors AS
    OPERATOR 1 <#> (vector, vector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vector_cos_ops
    FOR TYPE vector USING vectors AS
    OPERATOR 1 <=> (vector, vector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vecf16_l2_ops
    FOR TYPE vecf16 USING vectors AS
    OPERATOR 1 <-> (vecf16, vecf16) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vecf16_dot_ops
    FOR TYPE vecf16 USING vectors AS
    OPERATOR 1 <#> (vecf16, vecf16) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vecf16_cos_ops
    FOR TYPE vecf16 USING vectors AS
    OPERATOR 1 <=> (vecf16, vecf16) FOR ORDER BY float_ops;

-- List of views

CREATE VIEW pg_vector_index_stat AS
    SELECT
        C.oid AS tablerelid,
        I.oid AS indexrelid,
        C.relname AS tablename,
        I.relname AS indexname,
        (_vectors_index_stat(I.relfilenode)).*
    FROM pg_class C JOIN
         pg_index X ON C.oid = X.indrelid JOIN
         pg_class I ON I.oid = X.indexrelid JOIN
         pg_am A ON A.oid = I.relam
    WHERE A.amname = 'vectors';

-- finalize end
