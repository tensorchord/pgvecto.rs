/*
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/

-- src/lib.rs:24
-- bootstrap
-- bootstrap begin

-- List of shell types

CREATE TYPE vector;
CREATE TYPE vecf16;
CREATE TYPE svector;
CREATE TYPE bvector;
CREATE TYPE veci8;

CREATE TYPE vector_index_stat;

-- bootstrap end

-- src/datatype/subscript_veci8.rs:10
-- vectors::datatype::subscript_veci8::_vectors_veci8_subscript
CREATE FUNCTION _vectors_veci8_subscript(internal) RETURNS internal
IMMUTABLE STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_veci8_subscript_wrapper';

-- src/datatype/binary_veci8.rs:11
-- vectors::datatype::binary_veci8::_vectors_veci8_send
CREATE  FUNCTION "_vectors_veci8_send"(
	"vector" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS bytea /* vectors::datatype::binary::Bytea */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_send_wrapper';

-- src/datatype/binary_veci8.rs:33
-- vectors::datatype::binary_veci8::_vectors_veci8_recv
CREATE  FUNCTION "_vectors_veci8_recv"(
	"internal" internal, /* pgrx::datum::internal::Internal */
	"oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"typmod" INT /* i32 */
) RETURNS veci8 /* vectors::datatype::memory_veci8::Veci8Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_recv_wrapper';

-- src/datatype/text_veci8.rs:41
-- vectors::datatype::text_veci8::_vectors_veci8_out
CREATE  FUNCTION "_vectors_veci8_out"(
	"vector" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_out_wrapper';

-- src/datatype/operators_veci8.rs:79
-- vectors::datatype::operators_veci8::_vectors_veci8_operator_neq
CREATE  FUNCTION "_vectors_veci8_operator_neq"(
	"lhs" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"rhs" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_operator_neq_wrapper';

-- src/datatype/operators_veci8.rs:36
-- vectors::datatype::operators_veci8::_vectors_veci8_operator_mul
CREATE  FUNCTION "_vectors_veci8_operator_mul"(
	"lhs" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"rhs" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS veci8 /* vectors::datatype::memory_veci8::Veci8Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_operator_mul_wrapper';

-- src/datatype/operators_veci8.rs:22
-- vectors::datatype::operators_veci8::_vectors_veci8_operator_minus
CREATE  FUNCTION "_vectors_veci8_operator_minus"(
	"lhs" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"rhs" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS veci8 /* vectors::datatype::memory_veci8::Veci8Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_operator_minus_wrapper';

-- src/datatype/operators_veci8.rs:55
-- vectors::datatype::operators_veci8::_vectors_veci8_operator_lte
CREATE  FUNCTION "_vectors_veci8_operator_lte"(
	"lhs" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"rhs" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_operator_lte_wrapper';

-- src/datatype/operators_veci8.rs:49
-- vectors::datatype::operators_veci8::_vectors_veci8_operator_lt
CREATE  FUNCTION "_vectors_veci8_operator_lt"(
	"lhs" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"rhs" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_operator_lt_wrapper';

-- src/datatype/operators_veci8.rs:97
-- vectors::datatype::operators_veci8::_vectors_veci8_operator_l2
CREATE  FUNCTION "_vectors_veci8_operator_l2"(
	"lhs" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"rhs" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_operator_l2_wrapper';

-- src/datatype/operators_veci8.rs:67
-- vectors::datatype::operators_veci8::_vectors_veci8_operator_gte
CREATE  FUNCTION "_vectors_veci8_operator_gte"(
	"lhs" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"rhs" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_operator_gte_wrapper';

-- src/datatype/operators_veci8.rs:61
-- vectors::datatype::operators_veci8::_vectors_veci8_operator_gt
CREATE  FUNCTION "_vectors_veci8_operator_gt"(
	"lhs" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"rhs" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_operator_gt_wrapper';

-- src/datatype/operators_veci8.rs:73
-- vectors::datatype::operators_veci8::_vectors_veci8_operator_eq
CREATE  FUNCTION "_vectors_veci8_operator_eq"(
	"lhs" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"rhs" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_operator_eq_wrapper';

-- src/datatype/operators_veci8.rs:91
-- vectors::datatype::operators_veci8::_vectors_veci8_operator_dot
CREATE  FUNCTION "_vectors_veci8_operator_dot"(
	"lhs" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"rhs" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_operator_dot_wrapper';

-- src/datatype/operators_veci8.rs:85
-- vectors::datatype::operators_veci8::_vectors_veci8_operator_cosine
CREATE  FUNCTION "_vectors_veci8_operator_cosine"(
	"lhs" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"rhs" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_operator_cosine_wrapper';

-- src/datatype/operators_veci8.rs:9
-- vectors::datatype::operators_veci8::_vectors_veci8_operator_add
CREATE  FUNCTION "_vectors_veci8_operator_add"(
	"lhs" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"rhs" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS veci8 /* vectors::datatype::memory_veci8::Veci8Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_operator_add_wrapper';

-- src/datatype/functions_veci8.rs:17
-- vectors::datatype::functions_veci8::_vectors_veci8_normalize
CREATE  FUNCTION "_vectors_veci8_normalize"(
	"vector" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS veci8 /* vectors::datatype::memory_veci8::Veci8Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_normalize_wrapper';

-- src/datatype/functions_veci8.rs:12
-- vectors::datatype::functions_veci8::_vectors_veci8_norm
CREATE  FUNCTION "_vectors_veci8_norm"(
	"vector" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_norm_wrapper';

-- src/datatype/text_veci8.rs:9
-- vectors::datatype::text_veci8::_vectors_veci8_in
CREATE  FUNCTION "_vectors_veci8_in"(
	"input" cstring, /* &core::ffi::c_str::CStr */
	"_oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"typmod" INT /* i32 */
) RETURNS veci8 /* vectors::datatype::memory_veci8::Veci8Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_in_wrapper';

-- src/datatype/functions_veci8.rs:7
-- vectors::datatype::functions_veci8::_vectors_veci8_dims
CREATE  FUNCTION "_vectors_veci8_dims"(
	"vector" veci8 /* vectors::datatype::memory_veci8::Veci8Input */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_veci8_dims_wrapper';

-- src/datatype/subscript_vecf32.rs:10
-- vectors::datatype::subscript_vecf32::_vectors_vecf32_subscript
CREATE FUNCTION _vectors_vecf32_subscript(internal) RETURNS internal
IMMUTABLE STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_vecf32_subscript_wrapper';

-- src/datatype/binary_vecf32.rs:11
-- vectors::datatype::binary_vecf32::_vectors_vecf32_send
CREATE  FUNCTION "_vectors_vecf32_send"(
	"vector" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS bytea /* vectors::datatype::binary::Bytea */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_send_wrapper';

-- src/datatype/binary_vecf32.rs:25
-- vectors::datatype::binary_vecf32::_vectors_vecf32_recv
CREATE  FUNCTION "_vectors_vecf32_recv"(
	"internal" internal, /* pgrx::datum::internal::Internal */
	"oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"typmod" INT /* i32 */
) RETURNS vector /* vectors::datatype::memory_vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_recv_wrapper';

-- src/datatype/text_vecf32.rs:30
-- vectors::datatype::text_vecf32::_vectors_vecf32_out
CREATE  FUNCTION "_vectors_vecf32_out"(
	"vector" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_out_wrapper';

-- src/datatype/operators_vecf32.rs:71
-- vectors::datatype::operators_vecf32::_vectors_vecf32_operator_neq
CREATE  FUNCTION "_vectors_vecf32_operator_neq"(
	"lhs" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_neq_wrapper';

-- src/datatype/operators_vecf32.rs:31
-- vectors::datatype::operators_vecf32::_vectors_vecf32_operator_mul
CREATE  FUNCTION "_vectors_vecf32_operator_mul"(
	"lhs" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS vector /* vectors::datatype::memory_vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_mul_wrapper';

-- src/datatype/operators_vecf32.rs:20
-- vectors::datatype::operators_vecf32::_vectors_vecf32_operator_minus
CREATE  FUNCTION "_vectors_vecf32_operator_minus"(
	"lhs" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS vector /* vectors::datatype::memory_vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_minus_wrapper';

-- src/datatype/operators_vecf32.rs:47
-- vectors::datatype::operators_vecf32::_vectors_vecf32_operator_lte
CREATE  FUNCTION "_vectors_vecf32_operator_lte"(
	"lhs" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_lte_wrapper';

-- src/datatype/operators_vecf32.rs:41
-- vectors::datatype::operators_vecf32::_vectors_vecf32_operator_lt
CREATE  FUNCTION "_vectors_vecf32_operator_lt"(
	"lhs" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_lt_wrapper';

-- src/datatype/operators_vecf32.rs:89
-- vectors::datatype::operators_vecf32::_vectors_vecf32_operator_l2
CREATE  FUNCTION "_vectors_vecf32_operator_l2"(
	"lhs" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_l2_wrapper';

-- src/datatype/operators_vecf32.rs:59
-- vectors::datatype::operators_vecf32::_vectors_vecf32_operator_gte
CREATE  FUNCTION "_vectors_vecf32_operator_gte"(
	"lhs" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_gte_wrapper';

-- src/datatype/operators_vecf32.rs:53
-- vectors::datatype::operators_vecf32::_vectors_vecf32_operator_gt
CREATE  FUNCTION "_vectors_vecf32_operator_gt"(
	"lhs" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_gt_wrapper';

-- src/datatype/operators_vecf32.rs:65
-- vectors::datatype::operators_vecf32::_vectors_vecf32_operator_eq
CREATE  FUNCTION "_vectors_vecf32_operator_eq"(
	"lhs" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_eq_wrapper';

-- src/datatype/operators_vecf32.rs:83
-- vectors::datatype::operators_vecf32::_vectors_vecf32_operator_dot
CREATE  FUNCTION "_vectors_vecf32_operator_dot"(
	"lhs" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_dot_wrapper';

-- src/datatype/operators_vecf32.rs:77
-- vectors::datatype::operators_vecf32::_vectors_vecf32_operator_cosine
CREATE  FUNCTION "_vectors_vecf32_operator_cosine"(
	"lhs" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_cosine_wrapper';

-- src/datatype/operators_vecf32.rs:10
-- vectors::datatype::operators_vecf32::_vectors_vecf32_operator_add
CREATE  FUNCTION "_vectors_vecf32_operator_add"(
	"lhs" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS vector /* vectors::datatype::memory_vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_operator_add_wrapper';

-- src/datatype/functions_vecf32.rs:16
-- vectors::datatype::functions_vecf32::_vectors_vecf32_normalize
CREATE  FUNCTION "_vectors_vecf32_normalize"(
	"vector" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS vector /* vectors::datatype::memory_vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_normalize_wrapper';

-- src/datatype/functions_vecf32.rs:11
-- vectors::datatype::functions_vecf32::_vectors_vecf32_norm
CREATE  FUNCTION "_vectors_vecf32_norm"(
	"vector" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_norm_wrapper';

-- src/datatype/text_vecf32.rs:10
-- vectors::datatype::text_vecf32::_vectors_vecf32_in
CREATE  FUNCTION "_vectors_vecf32_in"(
	"input" cstring, /* &core::ffi::c_str::CStr */
	"_oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"typmod" INT /* i32 */
) RETURNS vector /* vectors::datatype::memory_vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_in_wrapper';

-- src/datatype/functions_vecf32.rs:6
-- vectors::datatype::functions_vecf32::_vectors_vecf32_dims
CREATE  FUNCTION "_vectors_vecf32_dims"(
	"vector" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_dims_wrapper';

-- src/datatype/aggregate_vecf32.rs:144
-- vectors::datatype::aggregate_vecf32::_vectors_vecf32_aggregate_sum_finalfunc
CREATE  FUNCTION "_vectors_vecf32_aggregate_sum_finalfunc"(
	"state" internal /* pgrx::datum::internal::Internal */
) RETURNS vector /* core::option::Option<vectors::datatype::memory_vecf32::Vecf32Output> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_aggregate_sum_finalfunc_wrapper';

-- src/datatype/aggregate_vecf32.rs:45
-- vectors::datatype::aggregate_vecf32::_vectors_vecf32_aggregate_avg_sum_sfunc
CREATE FUNCTION _vectors_vecf32_aggregate_avg_sum_sfunc(internal, vector) RETURNS internal IMMUTABLE PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_vecf32_aggregate_avg_sum_sfunc_wrapper';

-- src/datatype/aggregate_vecf32.rs:87
-- vectors::datatype::aggregate_vecf32::_vectors_vecf32_aggregate_avg_sum_combinefunc
CREATE FUNCTION _vectors_vecf32_aggregate_avg_sum_combinefunc(internal, internal) RETURNS internal IMMUTABLE PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_vecf32_aggregate_avg_sum_combinefunc_wrapper';

-- src/datatype/aggregate_vecf32.rs:126
-- vectors::datatype::aggregate_vecf32::_vectors_vecf32_aggregate_avg_finalfunc
CREATE  FUNCTION "_vectors_vecf32_aggregate_avg_finalfunc"(
	"state" internal /* pgrx::datum::internal::Internal */
) RETURNS vector /* core::option::Option<vectors::datatype::memory_vecf32::Vecf32Output> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf32_aggregate_avg_finalfunc_wrapper';

-- src/datatype/subscript_vecf16.rs:10
-- vectors::datatype::subscript_vecf16::_vectors_vecf16_subscript
CREATE FUNCTION _vectors_vecf16_subscript(internal) RETURNS internal
IMMUTABLE STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_vecf16_subscript_wrapper';

-- src/datatype/binary_vecf16.rs:11
-- vectors::datatype::binary_vecf16::_vectors_vecf16_send
CREATE  FUNCTION "_vectors_vecf16_send"(
	"vector" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS bytea /* vectors::datatype::binary::Bytea */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_send_wrapper';

-- src/datatype/binary_vecf16.rs:25
-- vectors::datatype::binary_vecf16::_vectors_vecf16_recv
CREATE  FUNCTION "_vectors_vecf16_recv"(
	"internal" internal, /* pgrx::datum::internal::Internal */
	"oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"typmod" INT /* i32 */
) RETURNS vecf16 /* vectors::datatype::memory_vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_recv_wrapper';

-- src/datatype/text_vecf16.rs:30
-- vectors::datatype::text_vecf16::_vectors_vecf16_out
CREATE  FUNCTION "_vectors_vecf16_out"(
	"vector" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_out_wrapper';

-- src/datatype/operators_vecf16.rs:71
-- vectors::datatype::operators_vecf16::_vectors_vecf16_operator_neq
CREATE  FUNCTION "_vectors_vecf16_operator_neq"(
	"lhs" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_neq_wrapper';

-- src/datatype/operators_vecf16.rs:31
-- vectors::datatype::operators_vecf16::_vectors_vecf16_operator_mul
CREATE  FUNCTION "_vectors_vecf16_operator_mul"(
	"lhs" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS vecf16 /* vectors::datatype::memory_vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_mul_wrapper';

-- src/datatype/operators_vecf16.rs:20
-- vectors::datatype::operators_vecf16::_vectors_vecf16_operator_minus
CREATE  FUNCTION "_vectors_vecf16_operator_minus"(
	"lhs" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS vecf16 /* vectors::datatype::memory_vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_minus_wrapper';

-- src/datatype/operators_vecf16.rs:47
-- vectors::datatype::operators_vecf16::_vectors_vecf16_operator_lte
CREATE  FUNCTION "_vectors_vecf16_operator_lte"(
	"lhs" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_lte_wrapper';

-- src/datatype/operators_vecf16.rs:41
-- vectors::datatype::operators_vecf16::_vectors_vecf16_operator_lt
CREATE  FUNCTION "_vectors_vecf16_operator_lt"(
	"lhs" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_lt_wrapper';

-- src/datatype/operators_vecf16.rs:89
-- vectors::datatype::operators_vecf16::_vectors_vecf16_operator_l2
CREATE  FUNCTION "_vectors_vecf16_operator_l2"(
	"lhs" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_l2_wrapper';

-- src/datatype/operators_vecf16.rs:59
-- vectors::datatype::operators_vecf16::_vectors_vecf16_operator_gte
CREATE  FUNCTION "_vectors_vecf16_operator_gte"(
	"lhs" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_gte_wrapper';

-- src/datatype/operators_vecf16.rs:53
-- vectors::datatype::operators_vecf16::_vectors_vecf16_operator_gt
CREATE  FUNCTION "_vectors_vecf16_operator_gt"(
	"lhs" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_gt_wrapper';

-- src/datatype/operators_vecf16.rs:65
-- vectors::datatype::operators_vecf16::_vectors_vecf16_operator_eq
CREATE  FUNCTION "_vectors_vecf16_operator_eq"(
	"lhs" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_eq_wrapper';

-- src/datatype/operators_vecf16.rs:83
-- vectors::datatype::operators_vecf16::_vectors_vecf16_operator_dot
CREATE  FUNCTION "_vectors_vecf16_operator_dot"(
	"lhs" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_dot_wrapper';

-- src/datatype/operators_vecf16.rs:77
-- vectors::datatype::operators_vecf16::_vectors_vecf16_operator_cosine
CREATE  FUNCTION "_vectors_vecf16_operator_cosine"(
	"lhs" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_cosine_wrapper';

-- src/datatype/operators_vecf16.rs:10
-- vectors::datatype::operators_vecf16::_vectors_vecf16_operator_add
CREATE  FUNCTION "_vectors_vecf16_operator_add"(
	"lhs" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS vecf16 /* vectors::datatype::memory_vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_operator_add_wrapper';

-- src/datatype/functions_vecf16.rs:16
-- vectors::datatype::functions_vecf16::_vectors_vecf16_normalize
CREATE  FUNCTION "_vectors_vecf16_normalize"(
	"vector" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS vecf16 /* vectors::datatype::memory_vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_normalize_wrapper';

-- src/datatype/functions_vecf16.rs:11
-- vectors::datatype::functions_vecf16::_vectors_vecf16_norm
CREATE  FUNCTION "_vectors_vecf16_norm"(
	"vector" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_norm_wrapper';

-- src/datatype/text_vecf16.rs:10
-- vectors::datatype::text_vecf16::_vectors_vecf16_in
CREATE  FUNCTION "_vectors_vecf16_in"(
	"input" cstring, /* &core::ffi::c_str::CStr */
	"_oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"typmod" INT /* i32 */
) RETURNS vecf16 /* vectors::datatype::memory_vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_in_wrapper';

-- src/datatype/functions_vecf16.rs:6
-- vectors::datatype::functions_vecf16::_vectors_vecf16_dims
CREATE  FUNCTION "_vectors_vecf16_dims"(
	"vector" vecf16 /* vectors::datatype::memory_vecf16::Vecf16Input */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_vecf16_dims_wrapper';

-- src/datatype/typmod.rs:76
-- vectors::datatype::typmod::_vectors_typmod_out
CREATE  FUNCTION "_vectors_typmod_out"(
	"typmod" INT /* i32 */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_typmod_out_wrapper';

-- src/datatype/typmod.rs:48
-- vectors::datatype::typmod::_vectors_typmod_in_65535
CREATE  FUNCTION "_vectors_typmod_in_65535"(
	"list" cstring[] /* pgrx::datum::array::Array<&core::ffi::c_str::CStr> */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_typmod_in_65535_wrapper';

-- src/datatype/typmod.rs:62
-- vectors::datatype::typmod::_vectors_typmod_in_1048575
CREATE  FUNCTION "_vectors_typmod_in_1048575"(
	"list" cstring[] /* pgrx::datum::array::Array<&core::ffi::c_str::CStr> */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_typmod_in_1048575_wrapper';

-- src/datatype/functions_veci8.rs:22
-- vectors::datatype::functions_veci8::_vectors_to_veci8
CREATE  FUNCTION "_vectors_to_veci8"(
	"len" INT, /* i32 */
	"alpha" real, /* f32 */
	"offset" real, /* f32 */
	"values" INT[] /* pgrx::datum::array::Array<i32> */
) RETURNS veci8 /* vectors::datatype::memory_veci8::Veci8Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_to_veci8_wrapper';

-- src/datatype/functions_svecf32.rs:23
-- vectors::datatype::functions_svecf32::_vectors_to_svector
CREATE  FUNCTION "_vectors_to_svector"(
	"dims" INT, /* i32 */
	"index" INT[], /* pgrx::datum::array::Array<i32> */
	"value" real[] /* pgrx::datum::array::Array<f32> */
) RETURNS svector /* vectors::datatype::memory_svecf32::SVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_to_svector_wrapper';

-- src/embedding/mod.rs:9
-- vectors::embedding::_vectors_text2vec_openai
CREATE  FUNCTION "_vectors_text2vec_openai"(
	"input" TEXT, /* alloc::string::String */
	"model" TEXT /* alloc::string::String */
) RETURNS vector /* vectors::datatype::memory_vecf32::Vecf32Output */
STRICT VOLATILE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_text2vec_openai_wrapper';

-- src/datatype/subscript_svecf32.rs:10
-- vectors::datatype::subscript_svecf32::_vectors_svecf32_subscript
CREATE FUNCTION _vectors_svecf32_subscript(internal) RETURNS internal
IMMUTABLE STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_svecf32_subscript_wrapper';

-- src/datatype/binary_svecf32.rs:12
-- vectors::datatype::binary_svecf32::_vectors_svecf32_send
CREATE  FUNCTION "_vectors_svecf32_send"(
	"vector" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS bytea /* vectors::datatype::binary::Bytea */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_send_wrapper';

-- src/datatype/binary_svecf32.rs:31
-- vectors::datatype::binary_svecf32::_vectors_svecf32_recv
CREATE  FUNCTION "_vectors_svecf32_recv"(
	"internal" internal, /* pgrx::datum::internal::Internal */
	"oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"typmod" INT /* i32 */
) RETURNS svector /* vectors::datatype::memory_svecf32::SVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_recv_wrapper';

-- src/datatype/text_svecf32.rs:42
-- vectors::datatype::text_svecf32::_vectors_svecf32_out
CREATE  FUNCTION "_vectors_svecf32_out"(
	"vector" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_out_wrapper';

-- src/datatype/operators_svecf32.rs:165
-- vectors::datatype::operators_svecf32::_vectors_svecf32_operator_neq
CREATE  FUNCTION "_vectors_svecf32_operator_neq"(
	"lhs" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"rhs" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_operator_neq_wrapper';

-- src/datatype/operators_svecf32.rs:93
-- vectors::datatype::operators_svecf32::_vectors_svecf32_operator_mul
CREATE  FUNCTION "_vectors_svecf32_operator_mul"(
	"lhs" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"rhs" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS svector /* vectors::datatype::memory_svecf32::SVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_operator_mul_wrapper';

-- src/datatype/operators_svecf32.rs:51
-- vectors::datatype::operators_svecf32::_vectors_svecf32_operator_minus
CREATE  FUNCTION "_vectors_svecf32_operator_minus"(
	"lhs" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"rhs" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS svector /* vectors::datatype::memory_svecf32::SVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_operator_minus_wrapper';

-- src/datatype/operators_svecf32.rs:141
-- vectors::datatype::operators_svecf32::_vectors_svecf32_operator_lte
CREATE  FUNCTION "_vectors_svecf32_operator_lte"(
	"lhs" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"rhs" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_operator_lte_wrapper';

-- src/datatype/operators_svecf32.rs:135
-- vectors::datatype::operators_svecf32::_vectors_svecf32_operator_lt
CREATE  FUNCTION "_vectors_svecf32_operator_lt"(
	"lhs" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"rhs" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_operator_lt_wrapper';

-- src/datatype/operators_svecf32.rs:183
-- vectors::datatype::operators_svecf32::_vectors_svecf32_operator_l2
CREATE  FUNCTION "_vectors_svecf32_operator_l2"(
	"lhs" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"rhs" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_operator_l2_wrapper';

-- src/datatype/operators_svecf32.rs:153
-- vectors::datatype::operators_svecf32::_vectors_svecf32_operator_gte
CREATE  FUNCTION "_vectors_svecf32_operator_gte"(
	"lhs" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"rhs" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_operator_gte_wrapper';

-- src/datatype/operators_svecf32.rs:147
-- vectors::datatype::operators_svecf32::_vectors_svecf32_operator_gt
CREATE  FUNCTION "_vectors_svecf32_operator_gt"(
	"lhs" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"rhs" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_operator_gt_wrapper';

-- src/datatype/operators_svecf32.rs:159
-- vectors::datatype::operators_svecf32::_vectors_svecf32_operator_eq
CREATE  FUNCTION "_vectors_svecf32_operator_eq"(
	"lhs" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"rhs" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_operator_eq_wrapper';

-- src/datatype/operators_svecf32.rs:177
-- vectors::datatype::operators_svecf32::_vectors_svecf32_operator_dot
CREATE  FUNCTION "_vectors_svecf32_operator_dot"(
	"lhs" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"rhs" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_operator_dot_wrapper';

-- src/datatype/operators_svecf32.rs:171
-- vectors::datatype::operators_svecf32::_vectors_svecf32_operator_cosine
CREATE  FUNCTION "_vectors_svecf32_operator_cosine"(
	"lhs" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"rhs" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_operator_cosine_wrapper';

-- src/datatype/operators_svecf32.rs:10
-- vectors::datatype::operators_svecf32::_vectors_svecf32_operator_add
CREATE  FUNCTION "_vectors_svecf32_operator_add"(
	"lhs" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"rhs" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS svector /* vectors::datatype::memory_svecf32::SVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_operator_add_wrapper';

-- src/datatype/functions_svecf32.rs:18
-- vectors::datatype::functions_svecf32::_vectors_svecf32_normalize
CREATE  FUNCTION "_vectors_svecf32_normalize"(
	"vector" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS svector /* vectors::datatype::memory_svecf32::SVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_normalize_wrapper';

-- src/datatype/functions_svecf32.rs:13
-- vectors::datatype::functions_svecf32::_vectors_svecf32_norm
CREATE  FUNCTION "_vectors_svecf32_norm"(
	"vector" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_norm_wrapper';

-- src/datatype/text_svecf32.rs:12
-- vectors::datatype::text_svecf32::_vectors_svecf32_in
CREATE  FUNCTION "_vectors_svecf32_in"(
	"input" cstring, /* &core::ffi::c_str::CStr */
	"_oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"typmod" INT /* i32 */
) RETURNS svector /* vectors::datatype::memory_svecf32::SVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_in_wrapper';

-- src/datatype/functions_svecf32.rs:65
-- vectors::datatype::functions_svecf32::_vectors_svecf32_div
CREATE  FUNCTION "_vectors_svecf32_div"(
	"vector" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"scalar" real /* f32 */
) RETURNS svector /* vectors::datatype::memory_svecf32::SVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_div_wrapper';

-- src/datatype/functions_svecf32.rs:8
-- vectors::datatype::functions_svecf32::_vectors_svecf32_dims
CREATE  FUNCTION "_vectors_svecf32_dims"(
	"vector" svector /* vectors::datatype::memory_svecf32::SVecf32Input */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_dims_wrapper';

-- src/datatype/aggregate_svecf32.rs:301
-- vectors::datatype::aggregate_svecf32::_vectors_svecf32_aggregate_sum_finalfunc
CREATE  FUNCTION "_vectors_svecf32_aggregate_sum_finalfunc"(
	"state" internal /* pgrx::datum::internal::Internal */
) RETURNS svector /* core::option::Option<vectors::datatype::memory_svecf32::SVecf32Output> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_aggregate_sum_finalfunc_wrapper';

-- src/datatype/aggregate_svecf32.rs:143
-- vectors::datatype::aggregate_svecf32::_vectors_svecf32_aggregate_avg_sum_sfunc
CREATE FUNCTION _vectors_svecf32_aggregate_avg_sum_sfunc(internal, svector) RETURNS internal IMMUTABLE PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_svecf32_aggregate_avg_sum_sfunc_wrapper';

-- src/datatype/aggregate_svecf32.rs:207
-- vectors::datatype::aggregate_svecf32::_vectors_svecf32_aggregate_avg_sum_combinefunc
CREATE FUNCTION _vectors_svecf32_aggregate_avg_sum_combinefunc(internal, internal) RETURNS internal IMMUTABLE PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_svecf32_aggregate_avg_sum_combinefunc_wrapper';

-- src/datatype/aggregate_svecf32.rs:278
-- vectors::datatype::aggregate_svecf32::_vectors_svecf32_aggregate_avg_finalfunc
CREATE  FUNCTION "_vectors_svecf32_aggregate_avg_finalfunc"(
	"state" internal /* pgrx::datum::internal::Internal */
) RETURNS svector /* core::option::Option<vectors::datatype::memory_svecf32::SVecf32Output> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_svecf32_aggregate_avg_finalfunc_wrapper';

-- src/index/functions.rs:2
-- vectors::index::functions::_vectors_pgvectors_upgrade
CREATE  FUNCTION "_vectors_pgvectors_upgrade"() RETURNS void
STRICT VOLATILE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_pgvectors_upgrade_wrapper';

-- src/index/views.rs:18
-- vectors::index::views::_vectors_index_stat
CREATE  FUNCTION "_vectors_index_stat"(
	"oid" oid /* pgrx_pg_sys::submodules::oids::Oid */
) RETURNS vector_index_stat /* pgrx::heap_tuple::PgHeapTuple<pgrx::pgbox::AllocatedByRust> */
STRICT VOLATILE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_index_stat_wrapper';

-- src/datatype/casts.rs:123
-- vectors::datatype::casts::_vectors_cast_veci8_to_vecf32
CREATE  FUNCTION "_vectors_cast_veci8_to_vecf32"(
	"vector" veci8, /* vectors::datatype::memory_veci8::Veci8Input */
	"_typmod" INT, /* i32 */
	"_explicit" bool /* bool */
) RETURNS vector /* vectors::datatype::memory_vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_veci8_to_vecf32_wrapper';

-- src/datatype/casts.rs:135
-- vectors::datatype::casts::_vectors_cast_vecf32_to_veci8
CREATE  FUNCTION "_vectors_cast_vecf32_to_veci8"(
	"vector" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"_typmod" INT, /* i32 */
	"_explicit" bool /* bool */
) RETURNS veci8 /* vectors::datatype::memory_veci8::Veci8Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_vecf32_to_veci8_wrapper';

-- src/datatype/casts.rs:36
-- vectors::datatype::casts::_vectors_cast_vecf32_to_vecf16
CREATE  FUNCTION "_vectors_cast_vecf32_to_vecf16"(
	"vector" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"_typmod" INT, /* i32 */
	"_explicit" bool /* bool */
) RETURNS vecf16 /* vectors::datatype::memory_vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_vecf32_to_vecf16_wrapper';

-- src/datatype/casts.rs:56
-- vectors::datatype::casts::_vectors_cast_vecf32_to_svecf32
CREATE  FUNCTION "_vectors_cast_vecf32_to_svecf32"(
	"vector" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"_typmod" INT, /* i32 */
	"_explicit" bool /* bool */
) RETURNS svector /* vectors::datatype::memory_svecf32::SVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_vecf32_to_svecf32_wrapper';

-- src/datatype/casts.rs:91
-- vectors::datatype::casts::_vectors_cast_vecf32_to_bvecf32
CREATE  FUNCTION "_vectors_cast_vecf32_to_bvecf32"(
	"vector" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"_typmod" INT, /* i32 */
	"_explicit" bool /* bool */
) RETURNS bvector /* vectors::datatype::memory_bvecf32::BVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_vecf32_to_bvecf32_wrapper';

-- src/datatype/casts.rs:27
-- vectors::datatype::casts::_vectors_cast_vecf32_to_array
CREATE  FUNCTION "_vectors_cast_vecf32_to_array"(
	"vector" vector, /* vectors::datatype::memory_vecf32::Vecf32Input */
	"_typmod" INT, /* i32 */
	"_explicit" bool /* bool */
) RETURNS real[] /* alloc::vec::Vec<f32> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_vecf32_to_array_wrapper';

-- src/datatype/casts.rs:46
-- vectors::datatype::casts::_vectors_cast_vecf16_to_vecf32
CREATE  FUNCTION "_vectors_cast_vecf16_to_vecf32"(
	"vector" vecf16, /* vectors::datatype::memory_vecf16::Vecf16Input */
	"_typmod" INT, /* i32 */
	"_explicit" bool /* bool */
) RETURNS vector /* vectors::datatype::memory_vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_vecf16_to_vecf32_wrapper';

-- src/datatype/casts.rs:81
-- vectors::datatype::casts::_vectors_cast_svecf32_to_vecf32
CREATE  FUNCTION "_vectors_cast_svecf32_to_vecf32"(
	"vector" svector, /* vectors::datatype::memory_svecf32::SVecf32Input */
	"_typmod" INT, /* i32 */
	"_explicit" bool /* bool */
) RETURNS vector /* vectors::datatype::memory_vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_svecf32_to_vecf32_wrapper';

-- src/datatype/casts.rs:109
-- vectors::datatype::casts::_vectors_cast_bvecf32_to_vecf32
CREATE  FUNCTION "_vectors_cast_bvecf32_to_vecf32"(
	"vector" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"_typmod" INT, /* i32 */
	"_explicit" bool /* bool */
) RETURNS vector /* vectors::datatype::memory_vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_bvecf32_to_vecf32_wrapper';

-- src/datatype/casts.rs:12
-- vectors::datatype::casts::_vectors_cast_array_to_vecf32
CREATE  FUNCTION "_vectors_cast_array_to_vecf32"(
	"array" real[], /* pgrx::datum::array::Array<f32> */
	"typmod" INT, /* i32 */
	"_explicit" bool /* bool */
) RETURNS vector /* vectors::datatype::memory_vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_cast_array_to_vecf32_wrapper';

-- src/datatype/subscript_bvecf32.rs:10
-- vectors::datatype::subscript_bvecf32::_vectors_bvecf32_subscript
CREATE FUNCTION _vectors_bvecf32_subscript(internal) RETURNS internal
IMMUTABLE STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_bvecf32_subscript_wrapper';

-- src/datatype/binary_bvecf32.rs:11
-- vectors::datatype::binary_bvecf32::_vectors_bvecf32_send
CREATE  FUNCTION "_vectors_bvecf32_send"(
	"vector" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS bytea /* vectors::datatype::binary::Bytea */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_send_wrapper';

-- src/datatype/binary_bvecf32.rs:25
-- vectors::datatype::binary_bvecf32::_vectors_bvecf32_recv
CREATE  FUNCTION "_vectors_bvecf32_recv"(
	"internal" internal, /* pgrx::datum::internal::Internal */
	"oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"typmod" INT /* i32 */
) RETURNS bvector /* vectors::datatype::memory_bvecf32::BVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_recv_wrapper';

-- src/datatype/text_bvecf32.rs:42
-- vectors::datatype::text_bvecf32::_vectors_bvecf32_out
CREATE  FUNCTION "_vectors_bvecf32_out"(
	"vector" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_out_wrapper';

-- src/datatype/operators_bvecf32.rs:29
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_xor
CREATE  FUNCTION "_vectors_bvecf32_operator_xor"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS bvector /* vectors::datatype::memory_bvecf32::BVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_xor_wrapper';

-- src/datatype/operators_bvecf32.rs:19
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_or
CREATE  FUNCTION "_vectors_bvecf32_operator_or"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS bvector /* vectors::datatype::memory_bvecf32::BVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_or_wrapper';

-- src/datatype/operators_bvecf32.rs:69
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_neq
CREATE  FUNCTION "_vectors_bvecf32_operator_neq"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_neq_wrapper';

-- src/datatype/operators_bvecf32.rs:45
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_lte
CREATE  FUNCTION "_vectors_bvecf32_operator_lte"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_lte_wrapper';

-- src/datatype/operators_bvecf32.rs:39
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_lt
CREATE  FUNCTION "_vectors_bvecf32_operator_lt"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_lt_wrapper';

-- src/datatype/operators_bvecf32.rs:87
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_l2
CREATE  FUNCTION "_vectors_bvecf32_operator_l2"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_l2_wrapper';

-- src/datatype/operators_bvecf32.rs:93
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_jaccard
CREATE  FUNCTION "_vectors_bvecf32_operator_jaccard"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_jaccard_wrapper';

-- src/datatype/operators_bvecf32.rs:57
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_gte
CREATE  FUNCTION "_vectors_bvecf32_operator_gte"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_gte_wrapper';

-- src/datatype/operators_bvecf32.rs:51
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_gt
CREATE  FUNCTION "_vectors_bvecf32_operator_gt"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_gt_wrapper';

-- src/datatype/operators_bvecf32.rs:63
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_eq
CREATE  FUNCTION "_vectors_bvecf32_operator_eq"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_eq_wrapper';

-- src/datatype/operators_bvecf32.rs:81
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_dot
CREATE  FUNCTION "_vectors_bvecf32_operator_dot"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_dot_wrapper';

-- src/datatype/operators_bvecf32.rs:75
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_cosine
CREATE  FUNCTION "_vectors_bvecf32_operator_cosine"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_cosine_wrapper';

-- src/datatype/operators_bvecf32.rs:9
-- vectors::datatype::operators_bvecf32::_vectors_bvecf32_operator_and
CREATE  FUNCTION "_vectors_bvecf32_operator_and"(
	"lhs" bvector, /* vectors::datatype::memory_bvecf32::BVecf32Input */
	"rhs" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS bvector /* vectors::datatype::memory_bvecf32::BVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_operator_and_wrapper';

-- src/datatype/functions_bvecf32.rs:12
-- vectors::datatype::functions_bvecf32::_vectors_bvecf32_norm
CREATE  FUNCTION "_vectors_bvecf32_norm"(
	"vector" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_norm_wrapper';

-- src/datatype/text_bvecf32.rs:10
-- vectors::datatype::text_bvecf32::_vectors_bvecf32_in
CREATE  FUNCTION "_vectors_bvecf32_in"(
	"input" cstring, /* &core::ffi::c_str::CStr */
	"_oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"typmod" INT /* i32 */
) RETURNS bvector /* vectors::datatype::memory_bvecf32::BVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_in_wrapper';

-- src/datatype/functions_bvecf32.rs:7
-- vectors::datatype::functions_bvecf32::_vectors_bvecf32_dims
CREATE  FUNCTION "_vectors_bvecf32_dims"(
	"vector" bvector /* vectors::datatype::memory_bvecf32::BVecf32Input */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_bvecf32_dims_wrapper';

-- src/datatype/functions_bvecf32.rs:17
-- vectors::datatype::functions_bvecf32::_vectors_binarize
CREATE  FUNCTION "_vectors_binarize"(
	"vector" vector /* vectors::datatype::memory_vecf32::Vecf32Input */
) RETURNS bvector /* vectors::datatype::memory_bvecf32::BVecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_binarize_wrapper';

-- src/index/am.rs:35
-- vectors::index::am::_vectors_amhandler
CREATE FUNCTION _vectors_amhandler(internal) RETURNS index_am_handler
IMMUTABLE STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_amhandler_wrapper';

-- src/index/views.rs:8
-- vectors::index::views::_vectors_alter_vector_index
CREATE  FUNCTION "_vectors_alter_vector_index"(
	"oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"key" TEXT, /* alloc::string::String */
	"value" TEXT /* alloc::string::String */
) RETURNS void
STRICT VOLATILE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', '_vectors_alter_vector_index_wrapper';

-- src/lib.rs:25
-- finalize
-- finalize begin

-- List of data types

CREATE TYPE vector (
    INPUT = _vectors_vecf32_in,
    OUTPUT = _vectors_vecf32_out,
    RECEIVE = _vectors_vecf32_recv,
    SEND = _vectors_vecf32_send,
    SUBSCRIPT = _vectors_vecf32_subscript,
    TYPMOD_IN = _vectors_typmod_in_65535,
    TYPMOD_OUT = _vectors_typmod_out,
    STORAGE = EXTERNAL,
    INTERNALLENGTH = VARIABLE,
    ALIGNMENT = double
);

CREATE TYPE vecf16 (
    INPUT = _vectors_vecf16_in,
    OUTPUT = _vectors_vecf16_out,
    RECEIVE = _vectors_vecf16_recv,
    SEND = _vectors_vecf16_send,
    SUBSCRIPT = _vectors_vecf16_subscript,
    TYPMOD_IN = _vectors_typmod_in_65535,
    TYPMOD_OUT = _vectors_typmod_out,
    STORAGE = EXTERNAL,
    INTERNALLENGTH = VARIABLE,
    ALIGNMENT = double
);

CREATE TYPE svector (
    INPUT = _vectors_svecf32_in,
    OUTPUT = _vectors_svecf32_out,
    RECEIVE = _vectors_svecf32_recv,
    SEND = _vectors_svecf32_send,
    SUBSCRIPT = _vectors_svecf32_subscript,
    TYPMOD_IN = _vectors_typmod_in_1048575,
    TYPMOD_OUT = _vectors_typmod_out,
    STORAGE = EXTERNAL,
    INTERNALLENGTH = VARIABLE,
    ALIGNMENT = double
);

CREATE TYPE bvector (
    INPUT = _vectors_bvecf32_in,
    OUTPUT = _vectors_bvecf32_out,
    RECEIVE = _vectors_bvecf32_recv,
    SEND = _vectors_bvecf32_send,
    SUBSCRIPT = _vectors_bvecf32_subscript,
    TYPMOD_IN = _vectors_typmod_in_65535,
    TYPMOD_OUT = _vectors_typmod_out,
    STORAGE = EXTERNAL,
    INTERNALLENGTH = VARIABLE,
    ALIGNMENT = double
);

CREATE TYPE veci8 (
    INPUT = _vectors_veci8_in,
    OUTPUT = _vectors_veci8_out,
    RECEIVE = _vectors_veci8_recv,
    SEND = _vectors_veci8_send,
    SUBSCRIPT = _vectors_veci8_subscript,
    TYPMOD_IN = _vectors_typmod_in_65535,
    TYPMOD_OUT = _vectors_typmod_out,
    STORAGE = EXTERNAL,
    INTERNALLENGTH = VARIABLE,
    ALIGNMENT = double
);

CREATE TYPE vector_index_stat AS (
    idx_status TEXT,
    idx_indexing BOOL,
    idx_tuples BIGINT,
    idx_sealed BIGINT[],
    idx_growing BIGINT[],
    idx_write BIGINT,
    idx_size BIGINT,
    idx_options TEXT
);

-- List of operators

CREATE OPERATOR + (
    PROCEDURE = _vectors_vecf32_operator_add,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = +
);

CREATE OPERATOR + (
    PROCEDURE = _vectors_vecf16_operator_add,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = +
);

CREATE OPERATOR + (
    PROCEDURE = _vectors_svecf32_operator_add,
    LEFTARG = svector,
    RIGHTARG = svector,
    COMMUTATOR = +
);

CREATE OPERATOR + (
    PROCEDURE = _vectors_veci8_operator_add,
    LEFTARG = veci8,
    RIGHTARG = veci8,
    COMMUTATOR = +
);

CREATE OPERATOR - (
    PROCEDURE = _vectors_vecf32_operator_minus,
    LEFTARG = vector,
    RIGHTARG = vector
);

CREATE OPERATOR - (
    PROCEDURE = _vectors_vecf16_operator_minus,
    LEFTARG = vecf16,
    RIGHTARG = vecf16
);

CREATE OPERATOR - (
    PROCEDURE = _vectors_svecf32_operator_minus,
    LEFTARG = svector,
    RIGHTARG = svector
);

CREATE OPERATOR - (
    PROCEDURE = _vectors_veci8_operator_minus,
    LEFTARG = veci8,
    RIGHTARG = veci8
);

CREATE OPERATOR * (
    PROCEDURE = _vectors_vecf32_operator_mul,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = *
);

CREATE OPERATOR * (
    PROCEDURE = _vectors_vecf16_operator_mul,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = *
);

CREATE OPERATOR * (
    PROCEDURE = _vectors_svecf32_operator_mul,
    LEFTARG = svector,
    RIGHTARG = svector,
    COMMUTATOR = *
);

CREATE OPERATOR * (
    PROCEDURE = _vectors_veci8_operator_mul,
    LEFTARG = veci8,
    RIGHTARG = veci8,
    COMMUTATOR = *
);

CREATE OPERATOR & (
    PROCEDURE = _vectors_bvecf32_operator_and,
    LEFTARG = bvector,
    RIGHTARG = bvector
);

CREATE OPERATOR | (
    PROCEDURE = _vectors_bvecf32_operator_or,
    LEFTARG = bvector,
    RIGHTARG = bvector
);

CREATE OPERATOR ^ (
    PROCEDURE = _vectors_bvecf32_operator_xor,
    LEFTARG = bvector,
    RIGHTARG = bvector
);

CREATE OPERATOR = (
    PROCEDURE = _vectors_vecf32_operator_eq,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = =,
    NEGATOR = <>,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR = (
    PROCEDURE = _vectors_vecf16_operator_eq,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = =,
    NEGATOR = <>,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR = (
    PROCEDURE = _vectors_svecf32_operator_eq,
    LEFTARG = svector,
    RIGHTARG = svector,
    COMMUTATOR = =,
    NEGATOR = <>,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR = (
    PROCEDURE = _vectors_bvecf32_operator_eq,
    LEFTARG = bvector,
    RIGHTARG = bvector,
    COMMUTATOR = =,
    NEGATOR = <>,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR = (
    PROCEDURE = _vectors_veci8_operator_eq,
    LEFTARG = veci8,
    RIGHTARG = veci8,
    COMMUTATOR = =,
    NEGATOR = <>,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR <> (
    PROCEDURE = _vectors_vecf32_operator_neq,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = <>,
    NEGATOR = =,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR <> (
    PROCEDURE = _vectors_vecf16_operator_neq,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = <>,
    NEGATOR = =,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR <> (
    PROCEDURE = _vectors_svecf32_operator_neq,
    LEFTARG = svector,
    RIGHTARG = svector,
    COMMUTATOR = <>,
    NEGATOR = =,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR <> (
    PROCEDURE = _vectors_bvecf32_operator_neq,
    LEFTARG = bvector,
    RIGHTARG = bvector,
    COMMUTATOR = <>,
    NEGATOR = =,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR <> (
    PROCEDURE = _vectors_veci8_operator_neq,
    LEFTARG = veci8,
    RIGHTARG = veci8,
    COMMUTATOR = <>,
    NEGATOR = =,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);

CREATE OPERATOR < (
    PROCEDURE = _vectors_vecf32_operator_lt,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR < (
    PROCEDURE = _vectors_vecf16_operator_lt,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR < (
    PROCEDURE = _vectors_svecf32_operator_lt,
    LEFTARG = svector,
    RIGHTARG = svector,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR < (
    PROCEDURE = _vectors_bvecf32_operator_lt,
    LEFTARG = bvector,
    RIGHTARG = bvector,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR < (
    PROCEDURE = _vectors_veci8_operator_lt,
    LEFTARG = veci8,
    RIGHTARG = veci8,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR > (
    PROCEDURE = _vectors_vecf32_operator_gt,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR > (
    PROCEDURE = _vectors_vecf16_operator_gt,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR > (
    PROCEDURE = _vectors_svecf32_operator_gt,
    LEFTARG = svector,
    RIGHTARG = svector,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR > (
    PROCEDURE = _vectors_bvecf32_operator_gt,
    LEFTARG = bvector,
    RIGHTARG = bvector,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR > (
    PROCEDURE = _vectors_veci8_operator_gt,
    LEFTARG = veci8,
    RIGHTARG = veci8,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR <= (
    PROCEDURE = _vectors_vecf32_operator_lte,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR <= (
    PROCEDURE = _vectors_vecf16_operator_lte,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR <= (
    PROCEDURE = _vectors_svecf32_operator_lte,
    LEFTARG = svector,
    RIGHTARG = svector,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR <= (
    PROCEDURE = _vectors_bvecf32_operator_lte,
    LEFTARG = bvector,
    RIGHTARG = bvector,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR <= (
    PROCEDURE = _vectors_veci8_operator_lte,
    LEFTARG = veci8,
    RIGHTARG = veci8,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);

CREATE OPERATOR >= (
    PROCEDURE = _vectors_vecf32_operator_gte,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR >= (
    PROCEDURE = _vectors_vecf16_operator_gte,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR >= (
    PROCEDURE = _vectors_svecf32_operator_gte,
    LEFTARG = svector,
    RIGHTARG = svector,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR >= (
    PROCEDURE = _vectors_bvecf32_operator_gte,
    LEFTARG = bvector,
    RIGHTARG = bvector,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR >= (
    PROCEDURE = _vectors_veci8_operator_gte,
    LEFTARG = veci8,
    RIGHTARG = veci8,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);

CREATE OPERATOR <-> (
    PROCEDURE = _vectors_vecf32_operator_l2,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = <->
);

CREATE OPERATOR <-> (
    PROCEDURE = _vectors_vecf16_operator_l2,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = <->
);

CREATE OPERATOR <-> (
    PROCEDURE = _vectors_svecf32_operator_l2,
    LEFTARG = svector,
    RIGHTARG = svector,
    COMMUTATOR = <->
);

CREATE OPERATOR <-> (
    PROCEDURE = _vectors_bvecf32_operator_l2,
    LEFTARG = bvector,
    RIGHTARG = bvector,
    COMMUTATOR = <->
);

CREATE OPERATOR <-> (
    PROCEDURE = _vectors_veci8_operator_l2,
    LEFTARG = veci8,
    RIGHTARG = veci8,
    COMMUTATOR = <->
);

CREATE OPERATOR <#> (
    PROCEDURE = _vectors_vecf32_operator_dot,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = <#>
);

CREATE OPERATOR <#> (
    PROCEDURE = _vectors_vecf16_operator_dot,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = <#>
);

CREATE OPERATOR <#> (
    PROCEDURE = _vectors_svecf32_operator_dot,
    LEFTARG = svector,
    RIGHTARG = svector,
    COMMUTATOR = <#>
);

CREATE OPERATOR <#> (
    PROCEDURE = _vectors_bvecf32_operator_dot,
    LEFTARG = bvector,
    RIGHTARG = bvector,
    COMMUTATOR = <#>
);

CREATE OPERATOR <#> (
    PROCEDURE = _vectors_veci8_operator_dot,
    LEFTARG = veci8,
    RIGHTARG = veci8,
    COMMUTATOR = <#>
);

CREATE OPERATOR <=> (
    PROCEDURE = _vectors_vecf32_operator_cosine,
    LEFTARG = vector,
    RIGHTARG = vector,
    COMMUTATOR = <=>
);

CREATE OPERATOR <=> (
    PROCEDURE = _vectors_vecf16_operator_cosine,
    LEFTARG = vecf16,
    RIGHTARG = vecf16,
    COMMUTATOR = <=>
);

CREATE OPERATOR <=> (
    PROCEDURE = _vectors_svecf32_operator_cosine,
    LEFTARG = svector,
    RIGHTARG = svector,
    COMMUTATOR = <=>
);

CREATE OPERATOR <=> (
    PROCEDURE = _vectors_bvecf32_operator_cosine,
    LEFTARG = bvector,
    RIGHTARG = bvector,
    COMMUTATOR = <=>
);

CREATE OPERATOR <=> (
    PROCEDURE = _vectors_veci8_operator_cosine,
    LEFTARG = veci8,
    RIGHTARG = veci8,
    COMMUTATOR = <=>
);

CREATE OPERATOR <~> (
    PROCEDURE = _vectors_bvecf32_operator_jaccard,
    LEFTARG = bvector,
    RIGHTARG = bvector,
    COMMUTATOR = <~>
);

-- List of functions

CREATE FUNCTION pgvectors_upgrade() RETURNS void
STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_pgvectors_upgrade_wrapper';

CREATE FUNCTION text2vec_openai("input" TEXT, "model" TEXT) RETURNS vector
STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_text2vec_openai_wrapper';

CREATE FUNCTION text2vec_openai_v3(input TEXT) RETURNS vector
STRICT PARALLEL SAFE LANGUAGE plpgsql AS
$$
DECLARE 
variable vector;
BEGIN
  variable := text2vec_openai(input, 'text-embedding-3-small');
  RETURN variable;
END;
$$;

CREATE FUNCTION alter_vector_index("index" OID, "key" TEXT, "value" TEXT) RETURNS void
STRICT LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_alter_vector_index_wrapper';

CREATE FUNCTION vector_dims(vector) RETURNS INT
STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_vecf32_dims_wrapper';

CREATE FUNCTION vector_dims(vecf16) RETURNS INT
STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_vecf16_dims_wrapper';

CREATE FUNCTION vector_dims(svector) RETURNS INT
STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_svecf32_dims_wrapper';

CREATE FUNCTION vector_dims(bvector) RETURNS INT
STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_bvecf32_dims_wrapper';

CREATE FUNCTION vector_dims(veci8) RETURNS INT
STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_veci8_dims_wrapper';

CREATE FUNCTION vector_norm(vector) RETURNS real
STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_vecf32_norm_wrapper';

CREATE FUNCTION vector_norm(vecf16) RETURNS real
STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_vecf16_norm_wrapper';

CREATE FUNCTION vector_norm(svector) RETURNS real
STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_svecf32_norm_wrapper';

CREATE FUNCTION vector_norm(bvector) RETURNS real
STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_bvecf32_norm_wrapper';

CREATE FUNCTION vector_norm(veci8) RETURNS real
STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_veci8_norm_wrapper';

CREATE FUNCTION to_svector("dims" INT, "indexes" INT[], "values" real[]) RETURNS svector
IMMUTABLE STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_to_svector_wrapper';

CREATE FUNCTION binarize("vector" vector) RETURNS bvector
IMMUTABLE STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_binarize_wrapper';

CREATE FUNCTION to_veci8("len" INT, "alpha" real, "offset" real, "values" INT[]) RETURNS veci8
IMMUTABLE STRICT PARALLEL SAFE LANGUAGE c AS 'MODULE_PATHNAME', '_vectors_to_veci8_wrapper';

-- List of aggregates

CREATE AGGREGATE avg(vector) (
    SFUNC = _vectors_vecf32_aggregate_avg_sum_sfunc,
    STYPE = internal,
    COMBINEFUNC = _vectors_vecf32_aggregate_avg_sum_combinefunc,
    FINALFUNC = _vectors_vecf32_aggregate_avg_finalfunc,
    PARALLEL = SAFE
);

CREATE AGGREGATE sum(vector) (
    SFUNC = _vectors_vecf32_aggregate_avg_sum_sfunc,
    STYPE = internal,
    COMBINEFUNC = _vectors_vecf32_aggregate_avg_sum_combinefunc,
    FINALFUNC = _vectors_vecf32_aggregate_sum_finalfunc,
    PARALLEL = SAFE
);

CREATE AGGREGATE avg(svector) (
    SFUNC = _vectors_svecf32_aggregate_avg_sum_sfunc,
    STYPE = internal,
    COMBINEFUNC = _vectors_svecf32_aggregate_avg_sum_combinefunc,
    FINALFUNC = _vectors_svecf32_aggregate_avg_finalfunc,
    PARALLEL = SAFE
);

CREATE AGGREGATE sum(svector) (
    SFUNC = _vectors_svecf32_aggregate_avg_sum_sfunc,
    STYPE = internal,
    COMBINEFUNC = _vectors_svecf32_aggregate_avg_sum_combinefunc,
    FINALFUNC = _vectors_svecf32_aggregate_sum_finalfunc,
    PARALLEL = SAFE
);

-- List of casts

CREATE CAST (real[] AS vector)
    WITH FUNCTION _vectors_cast_array_to_vecf32(real[], integer, boolean) AS IMPLICIT;

CREATE CAST (vector AS real[])
    WITH FUNCTION _vectors_cast_vecf32_to_array(vector, integer, boolean) AS IMPLICIT;

CREATE CAST (vector AS vecf16)
    WITH FUNCTION _vectors_cast_vecf32_to_vecf16(vector, integer, boolean);

CREATE CAST (vecf16 AS vector)
    WITH FUNCTION _vectors_cast_vecf16_to_vecf32(vecf16, integer, boolean);

CREATE CAST (vector AS svector)
    WITH FUNCTION _vectors_cast_vecf32_to_svecf32(vector, integer, boolean);

CREATE CAST (svector AS vector)
    WITH FUNCTION _vectors_cast_svecf32_to_vecf32(svector, integer, boolean);

CREATE CAST (vector AS bvector)
    WITH FUNCTION _vectors_cast_vecf32_to_bvecf32(vector, integer, boolean);

CREATE CAST (bvector AS vector)
    WITH FUNCTION _vectors_cast_bvecf32_to_vecf32(bvector, integer, boolean);

CREATE CAST (veci8 AS vector)
    WITH FUNCTION _vectors_cast_veci8_to_vecf32(veci8, integer, boolean);

CREATE CAST (vector AS veci8)
    WITH FUNCTION _vectors_cast_vecf32_to_veci8(vector, integer, boolean);

-- List of access methods

CREATE ACCESS METHOD vectors TYPE INDEX HANDLER _vectors_amhandler;
COMMENT ON ACCESS METHOD vectors IS 'pgvecto.rs index access method';

-- List of operator families

CREATE OPERATOR FAMILY vector_l2_ops USING vectors;

CREATE OPERATOR FAMILY vector_dot_ops USING vectors;

CREATE OPERATOR FAMILY vector_cos_ops USING vectors;

CREATE OPERATOR FAMILY vecf16_l2_ops USING vectors;

CREATE OPERATOR FAMILY vecf16_dot_ops USING vectors;

CREATE OPERATOR FAMILY vecf16_cos_ops USING vectors;

CREATE OPERATOR FAMILY svector_l2_ops USING vectors;

CREATE OPERATOR FAMILY svector_dot_ops USING vectors;

CREATE OPERATOR FAMILY svector_cos_ops USING vectors;

CREATE OPERATOR FAMILY bvector_l2_ops USING vectors;

CREATE OPERATOR FAMILY bvector_dot_ops USING vectors;

CREATE OPERATOR FAMILY bvector_cos_ops USING vectors;

CREATE OPERATOR FAMILY bvector_jaccard_ops USING vectors;

CREATE OPERATOR FAMILY veci8_l2_ops USING vectors;

CREATE OPERATOR FAMILY veci8_dot_ops USING vectors;

CREATE OPERATOR FAMILY veci8_cos_ops USING vectors;

-- List of operator classes

CREATE OPERATOR CLASS vector_l2_ops
    FOR TYPE vector USING vectors FAMILY vector_l2_ops AS
    OPERATOR 1 <-> (vector, vector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vector_dot_ops
    FOR TYPE vector USING vectors FAMILY vector_dot_ops AS
    OPERATOR 1 <#> (vector, vector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vector_cos_ops
    FOR TYPE vector USING vectors FAMILY vector_cos_ops AS
    OPERATOR 1 <=> (vector, vector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vecf16_l2_ops
    FOR TYPE vecf16 USING vectors FAMILY vecf16_l2_ops AS
    OPERATOR 1 <-> (vecf16, vecf16) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vecf16_dot_ops
    FOR TYPE vecf16 USING vectors FAMILY vecf16_dot_ops AS
    OPERATOR 1 <#> (vecf16, vecf16) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vecf16_cos_ops
    FOR TYPE vecf16 USING vectors FAMILY vecf16_cos_ops AS
    OPERATOR 1 <=> (vecf16, vecf16) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS svector_l2_ops
    FOR TYPE svector USING vectors FAMILY svector_l2_ops AS
    OPERATOR 1 <-> (svector, svector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS svector_dot_ops
    FOR TYPE svector USING vectors FAMILY svector_dot_ops AS
    OPERATOR 1 <#> (svector, svector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS svector_cos_ops
    FOR TYPE svector USING vectors FAMILY svector_cos_ops AS
    OPERATOR 1 <=> (svector, svector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS bvector_l2_ops
    FOR TYPE bvector USING vectors FAMILY bvector_l2_ops AS
    OPERATOR 1 <-> (bvector, bvector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS bvector_dot_ops
    FOR TYPE bvector USING vectors FAMILY bvector_dot_ops AS
    OPERATOR 1 <#> (bvector, bvector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS bvector_cos_ops
    FOR TYPE bvector USING vectors FAMILY bvector_cos_ops AS
    OPERATOR 1 <=> (bvector, bvector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS bvector_jaccard_ops
    FOR TYPE bvector USING vectors FAMILY bvector_jaccard_ops AS
    OPERATOR 1 <~> (bvector, bvector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS veci8_l2_ops
    FOR TYPE veci8 USING vectors FAMILY veci8_l2_ops AS
    OPERATOR 1 <-> (veci8, veci8) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS veci8_dot_ops
    FOR TYPE veci8 USING vectors FAMILY veci8_dot_ops AS
    OPERATOR 1 <#> (veci8, veci8) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS veci8_cos_ops
    FOR TYPE veci8 USING vectors FAMILY veci8_cos_ops AS
    OPERATOR 1 <=> (veci8, veci8) FOR ORDER BY float_ops;

-- List of views

CREATE VIEW pg_vector_index_stat AS
    SELECT
        C.oid AS tablerelid,
        I.oid AS indexrelid,
        C.relname AS tablename,
        I.relname AS indexname,
        (_vectors_index_stat(I.oid)).*
    FROM pg_class C JOIN
         pg_index X ON C.oid = X.indrelid JOIN
         pg_class I ON I.oid = X.indexrelid JOIN
         pg_am A ON A.oid = I.relam
    WHERE A.amname = 'vectors' AND C.relkind = 'r';

GRANT SELECT ON TABLE pg_vector_index_stat TO PUBLIC;

-- finalize end
