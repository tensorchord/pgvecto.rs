/*
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/


-- src/lib.rs:18
-- bootstrap
CREATE TYPE vector;
CREATE TYPE vecf16;


-- src/index/views.rs:18
-- vectors::index::views::vector_stat
CREATE  FUNCTION "vector_stat"(
	"oid" oid /* pgrx_pg_sys::submodules::oids::Oid */
) RETURNS VectorIndexStat /* pgrx::heap_tuple::PgHeapTuple<pgrx::pgbox::AllocatedByRust> */
STRICT VOLATILE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vector_stat_wrapper';

-- src/datatype/vecf32.rs:332
-- vectors::datatype::vecf32::vecf32_out
CREATE  FUNCTION "vecf32_out"(
	"vector" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_out_wrapper';

-- src/datatype/vecf32.rs:268
-- vectors::datatype::vecf32::vecf32_in
CREATE  FUNCTION "vecf32_in"(
	"input" cstring, /* &core::ffi::c_str::CStr */
	"_oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"typmod" INT /* i32 */
) RETURNS vector /* vectors::datatype::vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_in_wrapper';

-- src/datatype/casts_f32.rs:24
-- vectors::datatype::casts_f32::vecf32_cast_vector_to_array
CREATE  FUNCTION "vecf32_cast_vector_to_array"(
	"vector" vector, /* vectors::datatype::vecf32::Vecf32Input */
	"_typmod" INT, /* i32 */
	"_explicit" bool /* bool */
) RETURNS real[] /* alloc::vec::Vec<f32> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_cast_vector_to_array_wrapper';

-- src/datatype/casts_f32.rs:6
-- vectors::datatype::casts_f32::vecf32_cast_array_to_vector
CREATE  FUNCTION "vecf32_cast_array_to_vector"(
	"array" real[], /* pgrx::datum::array::Array<f32> */
	"typmod" INT, /* i32 */
	"_explicit" bool /* bool */
) RETURNS vector /* vectors::datatype::vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_cast_array_to_vector_wrapper';

-- src/datatype/vecf16.rs:332
-- vectors::datatype::vecf16::vecf16_out
CREATE  FUNCTION "vecf16_out"(
	"vector" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_out_wrapper';

-- src/datatype/vecf16.rs:268
-- vectors::datatype::vecf16::vecf16_in
CREATE  FUNCTION "vecf16_in"(
	"input" cstring, /* &core::ffi::c_str::CStr */
	"_oid" oid, /* pgrx_pg_sys::submodules::oids::Oid */
	"typmod" INT /* i32 */
) RETURNS vecf16 /* vectors::datatype::vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_in_wrapper';

-- src/datatype/typmod.rs:71
-- vectors::datatype::typmod::typmod_out
CREATE  FUNCTION "typmod_out"(
	"typmod" INT /* i32 */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'typmod_out_wrapper';

-- src/datatype/typmod.rs:56
-- vectors::datatype::typmod::typmod_in
CREATE  FUNCTION "typmod_in"(
	"list" cstring[] /* pgrx::datum::array::Array<&core::ffi::c_str::CStr> */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'typmod_in_wrapper';

-- src/embedding/udf.rs:9
-- vectors::embedding::udf::ai_embedding_vector
CREATE  FUNCTION "ai_embedding_vector"(
	"input" TEXT /* alloc::string::String */
) RETURNS vector /* vectors::datatype::vecf32::Vecf32Output */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ai_embedding_vector_wrapper';

-- src/datatype/vecf16.rs:22
-- creates:
--   Type(vectors::datatype::vecf16::Vecf16)

-- requires:
--   vecf16_in
--   vecf16_out
--   typmod_in
--   typmod_out


CREATE TYPE vecf16 (
    INPUT     = vecf16_in,
    OUTPUT    = vecf16_out,
    TYPMOD_IN = typmod_in,
    TYPMOD_OUT = typmod_out,
    STORAGE   = EXTENDED,
    INTERNALLENGTH = VARIABLE,
    ALIGNMENT = double
);


-- src/datatype/operators_f16.rs:99
-- vectors::datatype::operators_f16::vecf16_operator_gte
-- requires:
--   vecf16
CREATE  FUNCTION "vecf16_operator_gte"(
	"lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_operator_gte_wrapper';

-- src/datatype/operators_f16.rs:99
-- vectors::datatype::operators_f16::vecf16_operator_gte
CREATE OPERATOR >= (
	PROCEDURE="vecf16_operator_gte",
	LEFTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	RIGHTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	COMMUTATOR = <=,
	NEGATOR = <,
	RESTRICT = scalargtsel,
	JOIN = scalargtjoinsel
);

-- src/datatype/operators_f16.rs:175
-- vectors::datatype::operators_f16::vecf16_operator_l2
-- requires:
--   vecf16
CREATE  FUNCTION "vecf16_operator_l2"(
	"lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_operator_l2_wrapper';

-- src/datatype/operators_f16.rs:175
-- vectors::datatype::operators_f16::vecf16_operator_l2
CREATE OPERATOR <-> (
	PROCEDURE="vecf16_operator_l2",
	LEFTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	RIGHTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	COMMUTATOR = <->
);

-- src/datatype/operators_f16.rs:26
-- vectors::datatype::operators_f16::vecf16_operator_minus
-- requires:
--   vecf16
CREATE  FUNCTION "vecf16_operator_minus"(
	"lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS vecf16 /* vectors::datatype::vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_operator_minus_wrapper';

-- src/datatype/operators_f16.rs:26
-- vectors::datatype::operators_f16::vecf16_operator_minus
CREATE OPERATOR - (
	PROCEDURE="vecf16_operator_minus",
	LEFTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	RIGHTARG=vecf16 /* vectors::datatype::vecf16::Vecf16Input */
);

-- src/datatype/operators_f16.rs:8
-- vectors::datatype::operators_f16::vecf16_operator_add
-- requires:
--   vecf16
CREATE  FUNCTION "vecf16_operator_add"(
	"lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS vecf16 /* vectors::datatype::vecf16::Vecf16Output */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_operator_add_wrapper';

-- src/datatype/operators_f16.rs:8
-- vectors::datatype::operators_f16::vecf16_operator_add
CREATE OPERATOR + (
	PROCEDURE="vecf16_operator_add",
	LEFTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	RIGHTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	COMMUTATOR = +
);

-- src/datatype/operators_f16.rs:48
-- vectors::datatype::operators_f16::vecf16_operator_lt
-- requires:
--   vecf16
CREATE  FUNCTION "vecf16_operator_lt"(
	"lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_operator_lt_wrapper';

-- src/datatype/operators_f16.rs:48
-- vectors::datatype::operators_f16::vecf16_operator_lt
CREATE OPERATOR < (
	PROCEDURE="vecf16_operator_lt",
	LEFTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	RIGHTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	COMMUTATOR = >,
	NEGATOR = >=,
	RESTRICT = scalarltsel,
	JOIN = scalarltjoinsel
);

-- src/datatype/operators_f16.rs:116
-- vectors::datatype::operators_f16::vecf16_operator_eq
-- requires:
--   vecf16
CREATE  FUNCTION "vecf16_operator_eq"(
	"lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_operator_eq_wrapper';

-- src/datatype/operators_f16.rs:116
-- vectors::datatype::operators_f16::vecf16_operator_eq
CREATE OPERATOR = (
	PROCEDURE="vecf16_operator_eq",
	LEFTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	RIGHTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	COMMUTATOR = =,
	NEGATOR = <>,
	RESTRICT = eqsel,
	JOIN = eqjoinsel
);

-- src/datatype/operators_f16.rs:133
-- vectors::datatype::operators_f16::vecf16_operator_neq
-- requires:
--   vecf16
CREATE  FUNCTION "vecf16_operator_neq"(
	"lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_operator_neq_wrapper';

-- src/datatype/operators_f16.rs:133
-- vectors::datatype::operators_f16::vecf16_operator_neq
CREATE OPERATOR <> (
	PROCEDURE="vecf16_operator_neq",
	LEFTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	RIGHTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	COMMUTATOR = <>,
	NEGATOR = =,
	RESTRICT = eqsel,
	JOIN = eqjoinsel
);

-- src/datatype/operators_f16.rs:161
-- vectors::datatype::operators_f16::vecf16_operator_dot
-- requires:
--   vecf16
CREATE  FUNCTION "vecf16_operator_dot"(
	"lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_operator_dot_wrapper';

-- src/datatype/operators_f16.rs:161
-- vectors::datatype::operators_f16::vecf16_operator_dot
CREATE OPERATOR <#> (
	PROCEDURE="vecf16_operator_dot",
	LEFTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	RIGHTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	COMMUTATOR = <#>
);

-- src/datatype/operators_f16.rs:82
-- vectors::datatype::operators_f16::vecf16_operator_gt
-- requires:
--   vecf16
CREATE  FUNCTION "vecf16_operator_gt"(
	"lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_operator_gt_wrapper';

-- src/datatype/operators_f16.rs:82
-- vectors::datatype::operators_f16::vecf16_operator_gt
CREATE OPERATOR > (
	PROCEDURE="vecf16_operator_gt",
	LEFTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	RIGHTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	COMMUTATOR = <,
	NEGATOR = <=,
	RESTRICT = scalargtsel,
	JOIN = scalargtjoinsel
);

-- src/datatype/operators_f16.rs:65
-- vectors::datatype::operators_f16::vecf16_operator_lte
-- requires:
--   vecf16
CREATE  FUNCTION "vecf16_operator_lte"(
	"lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_operator_lte_wrapper';

-- src/datatype/operators_f16.rs:65
-- vectors::datatype::operators_f16::vecf16_operator_lte
CREATE OPERATOR <= (
	PROCEDURE="vecf16_operator_lte",
	LEFTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	RIGHTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	COMMUTATOR = >=,
	NEGATOR = >,
	RESTRICT = scalarltsel,
	JOIN = scalarltjoinsel
);

-- src/datatype/operators_f16.rs:147
-- vectors::datatype::operators_f16::vecf16_operator_cosine
-- requires:
--   vecf16
CREATE  FUNCTION "vecf16_operator_cosine"(
	"lhs" vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	"rhs" vecf16 /* vectors::datatype::vecf16::Vecf16Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf16_operator_cosine_wrapper';

-- src/datatype/operators_f16.rs:147
-- vectors::datatype::operators_f16::vecf16_operator_cosine
CREATE OPERATOR <=> (
	PROCEDURE="vecf16_operator_cosine",
	LEFTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	RIGHTARG=vecf16, /* vectors::datatype::vecf16::Vecf16Input */
	COMMUTATOR = <=>
);

-- src/datatype/vecf32.rs:22
-- creates:
--   Type(vectors::datatype::vecf32::Vecf32)

-- requires:
--   vecf32_in
--   vecf32_out
--   typmod_in
--   typmod_out


CREATE TYPE vector (
    INPUT     = vecf32_in,
    OUTPUT    = vecf32_out,
    TYPMOD_IN = typmod_in,
    TYPMOD_OUT = typmod_out,
    STORAGE   = EXTENDED,
    INTERNALLENGTH = VARIABLE,
    ALIGNMENT = double
);


-- src/datatype/operators_f32.rs:48
-- vectors::datatype::operators_f32::vecf32_operator_lt
-- requires:
--   vecf32
CREATE  FUNCTION "vecf32_operator_lt"(
	"lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_operator_lt_wrapper';

-- src/datatype/operators_f32.rs:48
-- vectors::datatype::operators_f32::vecf32_operator_lt
CREATE OPERATOR < (
	PROCEDURE="vecf32_operator_lt",
	LEFTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	RIGHTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	COMMUTATOR = >,
	NEGATOR = >=,
	RESTRICT = scalarltsel,
	JOIN = scalarltjoinsel
);

-- src/datatype/operators_f32.rs:99
-- vectors::datatype::operators_f32::vecf32_operator_gte
-- requires:
--   vecf32
CREATE  FUNCTION "vecf32_operator_gte"(
	"lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_operator_gte_wrapper';

-- src/datatype/operators_f32.rs:99
-- vectors::datatype::operators_f32::vecf32_operator_gte
CREATE OPERATOR >= (
	PROCEDURE="vecf32_operator_gte",
	LEFTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	RIGHTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	COMMUTATOR = <=,
	NEGATOR = <,
	RESTRICT = scalargtsel,
	JOIN = scalargtjoinsel
);

-- src/index/am.rs:33
-- vectors::index::am::vectors_amhandler

    CREATE OR REPLACE FUNCTION vectors_amhandler(internal) RETURNS index_am_handler
    PARALLEL SAFE IMMUTABLE STRICT LANGUAGE c AS 'MODULE_PATHNAME', 'vectors_amhandler_wrapper';




-- src/datatype/operators_f32.rs:175
-- vectors::datatype::operators_f32::vecf32_operator_l2
-- requires:
--   vecf32
CREATE  FUNCTION "vecf32_operator_l2"(
	"lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_operator_l2_wrapper';

-- src/datatype/operators_f32.rs:175
-- vectors::datatype::operators_f32::vecf32_operator_l2
CREATE OPERATOR <-> (
	PROCEDURE="vecf32_operator_l2",
	LEFTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	RIGHTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	COMMUTATOR = <->
);

-- src/datatype/operators_f32.rs:65
-- vectors::datatype::operators_f32::vecf32_operator_lte
-- requires:
--   vecf32
CREATE  FUNCTION "vecf32_operator_lte"(
	"lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_operator_lte_wrapper';

-- src/datatype/operators_f32.rs:65
-- vectors::datatype::operators_f32::vecf32_operator_lte
CREATE OPERATOR <= (
	PROCEDURE="vecf32_operator_lte",
	LEFTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	RIGHTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	COMMUTATOR = >=,
	NEGATOR = >,
	RESTRICT = scalarltsel,
	JOIN = scalarltjoinsel
);

-- src/datatype/operators_f32.rs:26
-- vectors::datatype::operators_f32::vecf32_operator_minus
-- requires:
--   vecf32
CREATE  FUNCTION "vecf32_operator_minus"(
	"lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS vector /* vectors::datatype::vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_operator_minus_wrapper';

-- src/datatype/operators_f32.rs:26
-- vectors::datatype::operators_f32::vecf32_operator_minus
CREATE OPERATOR - (
	PROCEDURE="vecf32_operator_minus",
	LEFTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	RIGHTARG=vector /* vectors::datatype::vecf32::Vecf32Input */
);

-- src/datatype/operators_f32.rs:82
-- vectors::datatype::operators_f32::vecf32_operator_gt
-- requires:
--   vecf32
CREATE  FUNCTION "vecf32_operator_gt"(
	"lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_operator_gt_wrapper';

-- src/datatype/operators_f32.rs:82
-- vectors::datatype::operators_f32::vecf32_operator_gt
CREATE OPERATOR > (
	PROCEDURE="vecf32_operator_gt",
	LEFTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	RIGHTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	COMMUTATOR = <,
	NEGATOR = <=,
	RESTRICT = scalargtsel,
	JOIN = scalargtjoinsel
);

-- src/datatype/operators_f32.rs:161
-- vectors::datatype::operators_f32::vecf32_operator_dot
-- requires:
--   vecf32
CREATE  FUNCTION "vecf32_operator_dot"(
	"lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_operator_dot_wrapper';

-- src/datatype/operators_f32.rs:161
-- vectors::datatype::operators_f32::vecf32_operator_dot
CREATE OPERATOR <#> (
	PROCEDURE="vecf32_operator_dot",
	LEFTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	RIGHTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	COMMUTATOR = <#>
);

-- src/datatype/operators_f32.rs:8
-- vectors::datatype::operators_f32::vecf32_operator_add
-- requires:
--   vecf32
CREATE  FUNCTION "vecf32_operator_add"(
	"lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS vector /* vectors::datatype::vecf32::Vecf32Output */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_operator_add_wrapper';

-- src/datatype/operators_f32.rs:8
-- vectors::datatype::operators_f32::vecf32_operator_add
CREATE OPERATOR + (
	PROCEDURE="vecf32_operator_add",
	LEFTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	RIGHTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	COMMUTATOR = +
);

-- src/datatype/operators_f32.rs:147
-- vectors::datatype::operators_f32::vecf32_operator_cosine
-- requires:
--   vecf32
CREATE  FUNCTION "vecf32_operator_cosine"(
	"lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS real /* f32 */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_operator_cosine_wrapper';

-- src/datatype/operators_f32.rs:147
-- vectors::datatype::operators_f32::vecf32_operator_cosine
CREATE OPERATOR <=> (
	PROCEDURE="vecf32_operator_cosine",
	LEFTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	RIGHTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	COMMUTATOR = <=>
);

-- src/datatype/operators_f32.rs:133
-- vectors::datatype::operators_f32::vecf32_operator_neq
-- requires:
--   vecf32
CREATE  FUNCTION "vecf32_operator_neq"(
	"lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_operator_neq_wrapper';

-- src/datatype/operators_f32.rs:133
-- vectors::datatype::operators_f32::vecf32_operator_neq
CREATE OPERATOR <> (
	PROCEDURE="vecf32_operator_neq",
	LEFTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	RIGHTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	COMMUTATOR = <>,
	NEGATOR = =,
	RESTRICT = eqsel,
	JOIN = eqjoinsel
);

-- src/datatype/operators_f32.rs:116
-- vectors::datatype::operators_f32::vecf32_operator_eq
-- requires:
--   vecf32
CREATE  FUNCTION "vecf32_operator_eq"(
	"lhs" vector, /* vectors::datatype::vecf32::Vecf32Input */
	"rhs" vector /* vectors::datatype::vecf32::Vecf32Input */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vecf32_operator_eq_wrapper';

-- src/datatype/operators_f32.rs:116
-- vectors::datatype::operators_f32::vecf32_operator_eq
CREATE OPERATOR = (
	PROCEDURE="vecf32_operator_eq",
	LEFTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	RIGHTARG=vector, /* vectors::datatype::vecf32::Vecf32Input */
	COMMUTATOR = =,
	NEGATOR = <>,
	RESTRICT = eqsel,
	JOIN = eqjoinsel
);

-- src/index/views.rs:4
CREATE TYPE VectorIndexStat AS (
    idx_indexing BOOL,
    idx_tuples BIGINT,
    idx_sealed BIGINT[],
    idx_growing BIGINT[],
    idx_write BIGINT,
    idx_options TEXT
);

-- src/lib.rs:19
-- finalize
CREATE CAST (real[] AS vector)
    WITH FUNCTION vecf32_cast_array_to_vector(real[], integer, boolean) AS IMPLICIT;

CREATE CAST (vector AS real[])
    WITH FUNCTION vecf32_cast_vector_to_array(vector, integer, boolean) AS IMPLICIT;

CREATE ACCESS METHOD vectors TYPE INDEX HANDLER vectors_amhandler;
COMMENT ON ACCESS METHOD vectors IS 'pgvecto.rs index access method';

CREATE OPERATOR CLASS vector_l2_ops
    FOR TYPE vector USING vectors AS
    OPERATOR 1 <-> (vector, vector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vector_dot_ops
    FOR TYPE vector USING vectors AS
    OPERATOR 1 <#> (vector, vector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vector_cos_ops
    FOR TYPE vector USING vectors AS
    OPERATOR 1 <=> (vector, vector) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vecf16_l2_ops
    FOR TYPE vecf16 USING vectors AS
    OPERATOR 1 <-> (vecf16, vecf16) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vecf16_dot_ops
    FOR TYPE vecf16 USING vectors AS
    OPERATOR 1 <#> (vecf16, vecf16) FOR ORDER BY float_ops;

CREATE OPERATOR CLASS vecf16_cos_ops
    FOR TYPE vecf16 USING vectors AS
    OPERATOR 1 <=> (vecf16, vecf16) FOR ORDER BY float_ops;

CREATE VIEW pg_vector_index_info AS
    SELECT
        C.oid AS tablerelid,
        I.oid AS indexrelid,
        C.relname AS tablename,
        I.relname AS indexname,
        (vector_stat(I.relfilenode)).*
    FROM pg_class C JOIN
         pg_index X ON C.oid = X.indrelid JOIN
         pg_class I ON I.oid = X.indexrelid JOIN
         pg_am A ON A.oid = I.relam
    WHERE A.amname = 'vectors';

