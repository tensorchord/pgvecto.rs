name: Rust check

on:
  push:
    branches: ["main"]
    paths:
      - ".cargo/**"
      - ".github/**"
      - "crates/**"
      - "scripts/**"
      - "src/**"
      - "tests/**"
      - "Cargo.lock"
      - "Cargo.toml"
      - "rust-toolchain.toml"
      - "vectors.control"
  pull_request:
    branches: ["main"]
    paths:
      - ".cargo/**"
      - ".github/**"
      - "crates/**"
      - "scripts/**"
      - "src/**"
      - "tests/**"
      - "Cargo.lock"
      - "Cargo.toml"
      - "rust-toolchain.toml"
      - "vectors.control"
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SCCACHE_GHA_ENABLED: true
  RUSTC_WRAPPER: sccache
  RUSTFLAGS: "-Dwarnings"

jobs:
  check:
    strategy:
      matrix:
        include:
          - { version: 14, os: "ubuntu-latest" }
          - { version: 15, os: "ubuntu-latest" }
          - { version: 16, os: "ubuntu-latest" }
    runs-on: ${{ matrix.os }}
    env:
      VERSION: ${{ matrix.version }}
      OS: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Sccache
        uses: mozilla-actions/sccache-action@v0.0.4
      - name: Set up Cache
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ github.job }}-${{ matrix.version }}-${{ matrix.os }}-${{ hashFiles('./Cargo.lock') }}
      - name: Set up PostgreSQL
        run: ./scripts/ci_setup.sh
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Set up Binstall
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
      - name: Set up Sqllogictest
        run: cargo binstall sqllogictest-bin -y --force
      - name: Set up Pgrx
        run: |
          cargo install cargo-pgrx@$(grep 'pgrx = {' Cargo.toml | cut -d '"' -f 2 | head -n 1) --debug
          cargo pgrx init --pg$VERSION=$(which pg_config)
      - name: Release build
        run: |
          cargo pgrx install --no-default-features --features "pg$VERSION" --release
          psql -c 'ALTER SYSTEM SET shared_preload_libraries = "vectors.so"'
          psql -c 'ALTER SYSTEM SET search_path = "$user", public, vectors'
          psql -c 'ALTER SYSTEM SET logging_collector = on'

          if [ "$OS" == "ubuntu-latest" ]; then
              sudo systemctl restart postgresql
              pg_lsclusters
          fi
      - name: Test
        run: ./tests/tests.sh
      - name: Cache
        uses: actions/cache/save@v4
        if: ${{ !steps.cache.outputs.cache-hit }}
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ github.job }}-${{ matrix.version }}-${{ matrix.os }}-${{ hashFiles('./Cargo.lock') }}
  debug_check:
    strategy:
      matrix:
        include:
          - { version: 14, os: "ubuntu-latest" }
          - { version: 15, os: "ubuntu-latest" }
          - { version: 16, os: "ubuntu-latest" }
    runs-on: ${{ matrix.os }}
    env:
      VERSION: ${{ matrix.version }}
      OS: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Sccache
        uses: mozilla-actions/sccache-action@v0.0.4
      - name: Set up Cache
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ github.job }}-${{ matrix.version }}-${{ matrix.os }}-${{ hashFiles('./Cargo.lock') }}
      - name: Set up PostgreSQL
        run: ./scripts/ci_setup.sh
      - name: Set up Binstall
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
      - name: Set up Pgrx
        run: |
          cargo install cargo-pgrx@$(grep 'pgrx = {' Cargo.toml | cut -d '"' -f 2 | head -n 1) --debug
          cargo pgrx init --pg$VERSION=$(which pg_config)
      - name: Format check
        run: cargo fmt --check
      - name: Semantic check
        run: |
          cargo clippy --no-default-features --features "pg${{ matrix.version }} pg_test" --target x86_64-unknown-linux-gnu
          cargo clippy --no-default-features --features "pg${{ matrix.version }} pg_test" --target aarch64-unknown-linux-gnu
      - name: Debug build
        run: |
          cargo build --no-default-features --features "pg${{ matrix.version }} pg_test" --target x86_64-unknown-linux-gnu
          cargo build --no-default-features --features "pg${{ matrix.version }} pg_test" --target aarch64-unknown-linux-gnu
      - name: Test
        run: |
          cargo test --all --no-fail-fast --no-default-features --features "pg${{ matrix.version }} pg_test" --target x86_64-unknown-linux-gnu -- --nocapture
      - name: Cache
        uses: actions/cache/save@v4
        if: ${{ !steps.cache.outputs.cache-hit }}
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ github.job }}-${{ matrix.version }}-${{ matrix.os }}-${{ hashFiles('./Cargo.lock') }}
