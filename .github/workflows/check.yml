name: Rust check

on:
  push:
    branches: [ "main" ]
    paths:
      - '.github/workflows/check.yml'
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'rust-toolchain.toml'
      - 'tests/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - '.github/workflows/check.yml'
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'rust-toolchain.toml'
      - 'tests/**'
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    strategy:
      matrix:
        version: [15]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache/restore@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: cargo-debug-${{ runner.os }}-pg${{ matrix.version }}-${{ hashFiles('./Cargo.toml') }}
        restore-keys: cargo-debug-${{ runner.os }}-pg${{ matrix.version }}
    - name: Prepare
      run: |
        cargo install cargo-pgrx --git https://github.com/tensorchord/pgrx.git --rev $(cat Cargo.toml | grep "pgrx =" | awk -F'rev = "' '{print $2}' | cut -d'"' -f1) || true
        cargo pgrx init --pg${{ matrix.version }}=/usr/lib/postgresql/${{ matrix.version }}/bin/pg_config
    - name: Format check
      run: cargo fmt --check
    - name: Semantic check
      run: cargo clippy

  build:
    strategy:
      matrix:
        version: [15]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ankane/setup-postgres@v1
      with:
        postgres-version: ${{ matrix.version }}
        dev-files: true
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: cargo-debug-${{ runner.os }}-pg${{ matrix.version }}-${{ hashFiles('./Cargo.toml') }}
        restore-keys: cargo-debug-${{ runner.os }}-pg${{ matrix.version }}
    - name: Prepare
      run: |
        cargo install cargo-pgrx --git https://github.com/tensorchord/pgrx.git --rev $(cat Cargo.toml | grep "pgrx =" | awk -F'rev = "' '{print $2}' | cut -d'"' -f1) || true
        cargo pgrx init --pg${{ matrix.version }}=/usr/lib/postgresql/${{ matrix.version }}/bin/pg_config
    - name: Build
      run: cargo build --verbose
    - name: Test
      env:
        RUST_BACKTRACE: 1
      run: cargo test --all --no-default-features --features "pg${{ matrix.version }} pg_test" -- --nocapture

  test:
    strategy:
      matrix:
        version: [15]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ankane/setup-postgres@v1
      with:
        postgres-version: ${{ matrix.version }}
        database: testdb
        dev-files: true
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: cargo-release-${{ runner.os }}-pg${{ matrix.version }}-${{ hashFiles('./Cargo.toml') }}
        restore-keys: cargo-release-${{ runner.os }}-pg${{ matrix.version }}
    - name: Prepare
      run: |
        cargo install cargo-pgrx --git https://github.com/tensorchord/pgrx.git --rev $(cat Cargo.toml | grep "pgrx =" | awk -F'rev = "' '{print $2}' | cut -d'"' -f1) || true
        cargo pgrx init --pg${{ matrix.version }}=/usr/lib/postgresql/${{ matrix.version }}/bin/pg_config
        cargo install sqllogictest-bin || true
    - name: Build
      run: |
        sudo chmod -R 777 /usr/share/postgresql/${{ matrix.version }}/extension
        sudo chmod -R 777 /usr/lib/postgresql/${{ matrix.version }}/lib
        cargo pgrx install --release
        psql -c 'ALTER SYSTEM SET shared_preload_libraries = "vectors.so"'
        sudo systemctl restart postgresql@${{ matrix.version }}-main
    - name: Sqllogictest
      run: |
        export password=$(openssl rand -base64 32)
        psql -c "ALTER USER $USER WITH PASSWORD '$password'"
        psql -d testdb -f ./tests/init.sql
        sqllogictest -u $USER -w $password -d testdb './tests/**/*.slt'