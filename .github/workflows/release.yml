name: Release

on:
  release:
    types:
      - created
      - edited

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: read

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: true
  RUSTC_WRAPPER: sccache

jobs:
  semver:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.semver }}
    steps:
      - uses: actions/github-script@v7
        id: version
        with:
          script: |
            const r = /(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
            if (!r.test("${{ github.event.release.tag_name }}")) {
              core.setFailed(`invalid semver`);
            }
            const matches = "${{ github.event.release.tag_name }}".match(r);
            console.log(matches);
            core.setOutput('semver', matches[0]);
  binary:
    strategy:
      matrix:
        include:
          - { version: 14, platform: amd64, arch: x86_64 }
          - { version: 14, platform: arm64, arch: aarch64 }
          - { version: 15, platform: amd64, arch: x86_64 }
          - { version: 15, platform: arm64, arch: aarch64 }
          - { version: 16, platform: amd64, arch: x86_64 }
          - { version: 16, platform: arm64, arch: aarch64 }
    runs-on: ubuntu-20.04
    needs: ["semver"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update release tag
        run: |
          sed -i "s/@CARGO_VERSION@/${{ needs.semver.outputs.version }}/g" ./vectors.control
          cat ./vectors.control
      - uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-${{ runner.os }}-pg${{ matrix.version }}-${{ hashFiles('./Cargo.lock') }}
          restore-keys: cargo-${{ runner.os }}-pg${{ matrix.version }}
      - uses: mozilla-actions/sccache-action@v0.0.3
      - name: Prepare
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
          sudo sh -c 'echo "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-16 main" >> /etc/apt/sources.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          wget --quiet -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install libpq-dev postgresql-${{ matrix.version }} postgresql-server-dev-${{ matrix.version }}
          sudo apt-get -y install clang-16
          cargo install cargo-pgrx@$(grep 'pgrx = {' Cargo.toml | cut -d '"' -f 2)
          cargo pgrx init --pg${{ matrix.version }}=/usr/lib/postgresql/${{ matrix.version }}/bin/pg_config
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            sudo apt-get -y install crossbuild-essential-arm64
            echo 'target.aarch64-unknown-linux-gnu.linker = "aarch64-linux-gnu-gcc"' | tee ~/.cargo/config.toml
            echo 'env.BINDGEN_EXTRA_CLANG_ARGS_aarch64_unknown_linux_gnu = "-isystem /usr/aarch64-linux-gnu/include/ -ccc-gcc-name aarch64-linux-gnu-gcc"' | tee -a ~/.cargo/config.toml
          fi
      - name: Build Release
        run: |
          sudo apt-get -y install ruby-dev libarchive-tools
          sudo gem install --no-document fpm
          mkdir ./artifacts
          ./scripts/ci_package.sh
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            cargo build --target aarch64-unknown-linux-gnu --release --features "pg${{ matrix.version }}" --no-default-features
            mv ./target/aarch64-unknown-linux-gnu/release/libvectors.so ./target/release/vectors-pg${{ matrix.version }}/usr/lib/postgresql/${{ matrix.version }}/lib/vectors.so
          fi
          mv ./target/release/vectors-pg${{ matrix.version }}/usr ./artifacts/usr
          cd artifacts
          fpm \
            --input-type dir \
            --output-type deb \
            --name vectors-pg${{ matrix.version }} \
            --version ${{ needs.semver.outputs.version }} \
            --license apache2 \
            --deb-no-default-config-files \
            --package ../vectors-pg${{ matrix.version }}_${{ needs.semver.outputs.version }}_${{ matrix.platform }}.deb \
            --architecture ${{ matrix.platform }} \
            .
        env:
          VERSION: ${{ matrix.version }}
      - name: Upload Release
        run: |
          gh release upload --clobber ${{ github.event.release.tag_name }} ./vectors-pg${{ matrix.version }}_${{ needs.semver.outputs.version }}_${{ matrix.platform }}.deb
        env:
          GH_TOKEN: ${{ github.token }}
  docker_binary_release:
    needs: ["binary", "semver"]
    strategy:
      matrix:
        include:
          - { version: 14, platform: amd64, arch: x86_64 }
          - { version: 14, platform: arm64, arch: aarch64 }
          - { version: 15, platform: amd64, arch: x86_64 }
          - { version: 15, platform: arm64, arch: aarch64 }
          - { version: 16, platform: amd64, arch: x86_64 }
          - { version: 16, platform: arm64, arch: aarch64 }
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download ${{ github.event.release.tag_name }} --pattern "vectors-pg${{ matrix.version }}_${{ needs.semver.outputs.version }}_${{ matrix.platform }}.deb" --output pgvecto-rs-binary-release.deb
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_TOKEN }}
      - name: Push binary release to Docker Registry
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: "linux/${{ matrix.platform }}"
          file: ./docker/binary_release.Dockerfile
          tags: tensorchord/pgvecto-rs-binary:pg${{ matrix.version }}-v${{ needs.semver.outputs.version }}-${{ matrix.platform }}
  docker_release:
    needs: ["docker_binary_release", "semver"]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - { version: 14 }
          - { version: 15 }
          - { version: 16 }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Variables
        id: variables
        uses: actions/github-script@v6
        with:
          script: |
            let tags = [
              "tensorchord/pgvecto-rs:pg${{ matrix.version }}-v${{ needs.semver.outputs.version }}",
            ];
            // const actor = context.actor;
            // if (actor != "github-actions[bot]") {
            //   tags.push("tensorchord/pgvecto-rs:pg${{ matrix.version }}-latest");
            // }
            // if ("${{ matrix.latest }}" == "true" && actor != "github-actions[bot]") {
            //   tags.push("tensorchord/pgvecto-rs:latest");
            // }
            core.setOutput('tags', tags.join(", "));
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_TOKEN }}
      - name: Push postgres with pgvecto.rs to Docker Registry
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: "linux/amd64,linux/arm64"
          file: ./docker/pgvecto-rs.Dockerfile
          build-args: |
            TAG=pg${{ matrix.version }}-v${{ needs.semver.outputs.version }}
            POSTGRES_VERSION=${{ matrix.version }}
          tags: ${{ steps.variables.outputs.tags }}
