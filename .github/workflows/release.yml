name: Release

on:
  push:
    tags:
      - "v*"
  schedule:
    # 00:00 UTC+8 -> 16:00
    - cron: "0 16 * * *"
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: The version to be released.
        required: true
      ref:
        type: string
        description: |
          Ref to checkout.
          For tags, use the prefix "refs/tags/".
          For branchs, use the prefix "refs/heads/".
        required: true
        default: refs/heads/main
      prerelease:
        type: boolean
        description: Prerelease or not.
        required: true
        default: true

permissions:
  contents: write
  pull-requests: read

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: true
  RUSTC_WRAPPER: sccache

jobs:
  setup:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check recents
        id: check-recents
        run: |
          commit_date=$(git log -1 --since="24 hours ago" --pretty=format:"%cI")
          if [[ -n "$commit_date" ]];
          then echo "recents=true" >> $GITHUB_OUTPUT;
          else echo "recents=false" >> $GITHUB_OUTPUT;
          fi
        shell: bash
      - name: Set version, recheck, ref, prerelease
        id: sets
        uses: actions/github-script@v6
        with:
          script: |
            if ("${{ github.event_name }}" == 'push') {
              if (context.ref.startsWith("refs/tags/")) {
                let version = context.ref.substring("refs/tags/".length);
                core.setOutput('version', version);
                core.setOutput('recheck', 'true');
                core.setOutput('ref', context.ref);
                core.setOutput('prerelease', false);
              } else {
                throw new Error("unreachable");
              }
            } else if ("${{ github.event_name }}" == 'schedule') {
              let date = new Date();
              date.setHours(date.getHours() + 8);
              var yyyy = date.getUTCFullYear();
              var mm = String(1 + date.getUTCMonth()).padStart(2, '0');
              var dd = String(0 + date.getUTCDate()).padStart(2, '0');
              let version = `v0.0.0-nightly.${yyyy}${mm}${dd}`;
              core.setOutput('version', version);
              if ("${{ steps.check-recents.outputs.recents }}" == "true") {
                core.setOutput('recheck', 'true');
              } else {
                core.setOutput('recheck', 'false');
              }
              core.setOutput('ref', 'refs/heads/main');
              core.setOutput('prerelease', true);
            } else if ("${{ github.event_name }}" == 'workflow_dispatch') {
              let version = "${{ github.event.inputs.version }}";
              let ref = "${{ github.event.inputs.ref }}";
              let prerelease = "${{ github.event.inputs.prerelease }}";
              core.setOutput('version', version);
              core.setOutput('recheck', 'true');
              core.setOutput('ref', ref);
              core.setOutput('prerelease', prerelease);
            } else {
              throw new Error("unreachable");
            }
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.sets.outputs.version }}
          release_name: ${{ steps.sets.outputs.version }}
          draft: false
          prerelease: ${{ steps.sets.outputs.prerelease }}
    outputs:
      version: ${{ steps.sets.outputs.version }}
      recheck: ${{ steps.sets.outputs.recheck }}
      ref: ${{ steps.sets.outputs.ref }}
      prerelease: ${{ steps.sets.outputs.prerelease }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
  release:
    strategy:
      matrix:
        arch: [amd64, arm64]
        version: [14, 15, 16]
        include:
          - arch: amd64
            full_arch: x86_64
          - arch: arm64
            full_arch: aarch64
    needs: setup
    runs-on: ubuntu-20.04
    if: ${{ needs.setup.outputs.recheck == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.setup.outputs.ref }}
      - uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-${{ runner.os }}-pg${{ matrix.version }}-${{ hashFiles('./Cargo.toml') }}
          restore-keys: cargo-${{ runner.os }}-pg${{ matrix.version }}
      - uses: mozilla-actions/sccache-action@v0.0.3
      - name: Prepare
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install libpq-dev postgresql-${{ matrix.version }} postgresql-server-dev-${{ matrix.version }}
          cargo install cargo-pgrx --version $(grep '^pgrx ' Cargo.toml | awk -F'\"' '{print $2}')
          cargo pgrx init --pg${{ matrix.version }}=/usr/lib/postgresql/${{ matrix.version }}/bin/pg_config
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            sudo apt-get -y install crossbuild-essential-arm64
            rustup target add aarch64-unknown-linux-gnu
          fi
      - name: Build Release
        id: build_release
        run: |
          sudo apt-get -y install ruby-dev libarchive-tools
          sudo gem install --no-document fpm
          mkdir ./artifacts
          cargo pgrx package
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            export BINDGEN_EXTRA_CLANG_ARGS_aarch64_unknown_linux_gnu="-target aarch64-unknown-linux-gnu -isystem /usr/aarch64-linux-gnu/include/ -ccc-gcc-name aarch64-linux-gnu-gcc"
            cargo build --target aarch64-unknown-linux-gnu --release --features "pg${{ matrix.version }}" --no-default-features
            mv ./target/aarch64-unknown-linux-gnu/release/libvectors.so ./target/release/vectors-pg${{ matrix.version }}/usr/lib/postgresql/${{ matrix.version }}/lib/vectors.so
          fi
          mv ./target/release/vectors-pg${{ matrix.version }}/usr ./artifacts/usr
          cd artifacts
          fpm \
            --input-type dir \
            --output-type deb \
            --name vectors-pg${{ matrix.version }} \
            --version ${{ needs.setup.outputs.version }} \
            --license apache2 \
            --deb-no-default-config-files \
            --package ../vectors-pg${{ matrix.version }}-${{ needs.setup.outputs.version }}-${{ matrix.full_arch }}-unknown-linux-gnu.deb \
            --architecture ${{ matrix.arch }} \
            .
      - name: Upload Release / DEB
        id: upload_release_deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.upload_url }}
          asset_path: ./vectors-pg${{ matrix.version }}-${{ needs.setup.outputs.version }}-${{ matrix.full_arch }}-unknown-linux-gnu.deb
          asset_name: vectors-pg${{ matrix.version }}-${{ needs.setup.outputs.version }}-${{ matrix.full_arch }}-unknown-linux-gnu.deb
          asset_content_type: application/vnd.debian.binary-package
      - name: Copy binary release
        run: 'cp vectors-pg${{ matrix.version }}-${{ needs.setup.outputs.version }}-${{ matrix.full_arch }}-unknown-linux-gnu.deb pgvecto-rs-binary-release.deb'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_TOKEN }}
      - name: Push binary release to Docker Registry        
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: "linux/${{ matrix.arch }}"
          file: ./docker/binary_release.Dockerfile
          tags: tensorchord/pgvecto-rs-binary:latest, tensorchord/pgvecto-rs-binary:pg${{ matrix.version }}-${{ needs.setup.outputs.version }}-${{ matrix.arch }}
      - name: Push postgres with pgvecto.rs to Docker Registry        
        uses: docker/build-push-action@v4
        with:
          context: .          
          push: true
          platforms: "linux/${{ matrix.arch }}"
          file: ./docker/pgvecto-rs.Dockerfile
          tags: tensorchord/pgvecto-rs:latest, tensorchord/pgvecto-rs:pg${{ matrix.version }}-${{ needs.setup.outputs.version }}-${{ matrix.arch }}