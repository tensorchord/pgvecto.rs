name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: Version
        required: true
      tag:
        type: string
        description: Tag
        required: true

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SCCACHE_GHA_ENABLED: true
  RUSTC_WRAPPER: sccache
  RUSTFLAGS: "-Dwarnings"

permissions:
  contents: write
  pull-requests: read

jobs:
  semver:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const r = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
            if (!r.test("${{ github.event.inputs.version }}")) {
              core.setFailed(`Action failed with an invalid semver.`);
            }
  binary:
    strategy:
      matrix:
        include:
          - { version: 14, platform: amd64, arch: x86_64 }
          - { version: 14, platform: arm64, arch: aarch64 }
          - { version: 15, platform: amd64, arch: x86_64 }
          - { version: 15, platform: arm64, arch: aarch64 }
          - { version: 16, platform: amd64, arch: x86_64 }
          - { version: 16, platform: arm64, arch: aarch64 }
    runs-on: ubuntu-20.04
    needs: ["semver"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Sccache
        uses: mozilla-actions/sccache-action@v0.0.4
      - name: Set up Crossbuild
        if: ${{ matrix.arch == 'aarch64' }}
        run: |
          sudo apt-get -y install crossbuild-essential-arm64
          echo 'target.aarch64-unknown-linux-gnu.linker = "aarch64-linux-gnu-gcc"' | tee ~/.cargo/config.toml
          echo 'env.BINDGEN_EXTRA_CLANG_ARGS_aarch64_unknown_linux_gnu = "-isystem /usr/aarch64-linux-gnu/include/ -ccc-gcc-name aarch64-linux-gnu-gcc"' | tee -a ~/.cargo/config.toml
      - name: Build Release
        run: |
          export SEMVER=${{ github.event.inputs.version }}
          export VERSION=${{ matrix.version }}
          export ARCH=${{ matrix.arch }}
          export _PGRX=$(grep 'pgrx = {' Cargo.toml | cut -d '"' -f 2 | head -n 1)
          export _RUST=$(grep -oP 'channel = "\K[^"]+' ./rust-toolchain.toml)
          sudo -E ./scripts/build_0.sh
          ./scripts/build_1.sh
          ./scripts/build_2.sh
      - name: Upload
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload --clobber ${{ github.event.inputs.tag }} ./build/vectors-pg${{ matrix.version }}_${{ matrix.arch }}-unknown-linux-gnu_${{ github.event.inputs.version }}.zip
          gh release upload --clobber ${{ github.event.inputs.tag }} ./build/vectors-pg${{ matrix.version }}_${{ github.event.inputs.version }}-1_${{ matrix.platform }}.deb
  docker_binary_release:
    needs: ["binary", "semver"]
    strategy:
      matrix:
        include:
          - { version: 14, platform: amd64, arch: x86_64 }
          - { version: 14, platform: arm64, arch: aarch64 }
          - { version: 15, platform: amd64, arch: x86_64 }
          - { version: 15, platform: arm64, arch: aarch64 }
          - { version: 16, platform: amd64, arch: x86_64 }
          - { version: 16, platform: arm64, arch: aarch64 }
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download ${{ github.event.inputs.tag }} --pattern "vectors-pg${{ matrix.version }}_${{ github.event.inputs.version }}-1_${{ matrix.platform }}.deb" --output pgvecto-rs-binary-release.deb
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_TOKEN }}
      - name: Push binary release to Docker Registry
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: "linux/${{ matrix.platform }}"
          file: ./docker/binary_release.Dockerfile
          tags: tensorchord/pgvecto-rs-binary:pg${{ matrix.version }}-v${{ github.event.inputs.version }}-${{ matrix.platform }}
  docker_release:
    needs: ["docker_binary_release", "semver"]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [14, 15, 16]
        rootless: [true, false]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Variables
        id: variables
        uses: actions/github-script@v7
        with:
          script: |
            if ("${{ matrix.rootless }}" == "true") {
              core.setOutput('tags', "tensorchord/pgvecto-rs:pg${{ matrix.version }}-v${{ github.event.inputs.version }}-rootless");
            } else {
              core.setOutput('tags', "tensorchord/pgvecto-rs:pg${{ matrix.version }}-v${{ github.event.inputs.version }}");
            }
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_TOKEN }}
      - name: Push postgres with pgvecto.rs to Docker Registry(rootful)
        if: matrix.rootless == false
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: "linux/amd64,linux/arm64"
          file: ./docker/pgvecto-rs.Dockerfile
          build-args: |
            FROM_TAG=pg${{ matrix.version }}-v${{ github.event.inputs.version }}
            POSTGRES_VERSION=${{ matrix.version }}
          tags: ${{ steps.variables.outputs.tags }}
      - name: Push postgres with pgvecto.rs to Docker Registry(rootless)
        if: matrix.rootless == true
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: "linux/amd64,linux/arm64"
          file: ./docker/pgvecto-rs-rootless.Dockerfile
          build-args: |
            FROM_TAG=pg${{ matrix.version }}-v${{ github.event.inputs.version }}
            POSTGRES_VERSION=${{ matrix.version }}
          tags: ${{ steps.variables.outputs.tags }}
