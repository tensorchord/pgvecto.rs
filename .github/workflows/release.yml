name: Release

on:
  schedule:
    # 00:00 UTC+8 -> 16:00
    - cron: "0 16 * * *"
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: The version to be released.
        required: true
      prerelease:
        type: boolean
        description: Prerelease or not.
        required: true
        default: true

permissions:
  contents: write
  pull-requests: read

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: true
  RUSTC_WRAPPER: sccache

jobs:
  setup:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: check-nightly
        run: |
          commit_date=$(git log -1 --since="24 hours ago" --pretty=format:"%cI")
          if [[ -n "$commit_date" ]];
          then echo "nightly=true" >> $GITHUB_OUTPUT;
          else echo "nightly=false" >> $GITHUB_OUTPUT;
          fi
      - name: Variables
        id: variables
        uses: actions/github-script@v6
        with:
          script: |
            if ("${{ github.event_name }}" == 'schedule') {
              let date = new Date();
              date.setHours(date.getHours() + 8);
              var yyyy = date.getUTCFullYear();
              var mm = String(1 + date.getUTCMonth()).padStart(2, '0');
              var dd = String(0 + date.getUTCDate()).padStart(2, '0');
              let version = `v0.0.0-nightly.${yyyy}${mm}${dd}`;
              core.setOutput('version', version);
              if ("${{ steps.check-nightly.outputs.nightly }}" == "true") {
                core.setOutput('recheck', 'true');
              } else {
                core.setOutput('recheck', 'false');
              }
              core.setOutput('prerelease', true);
            }
            if ("${{ github.event_name }}" == 'workflow_dispatch') {
              let version = "${{ github.event.inputs.version }}";
              let prerelease = "${{ github.event.inputs.prerelease }}";
              core.setOutput('version', version);
              core.setOutput('recheck', 'true');
              core.setOutput('prerelease', prerelease);
            }
    outputs:
      version: ${{ steps.variables.outputs.version }}
      recheck: ${{ steps.variables.outputs.recheck }}
      prerelease: ${{ steps.variables.outputs.prerelease }}
  create_github_release:
    needs: ["setup"]
    if: ${{ needs.setup.outputs.recheck == 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.version }}
          release_name: ${{ needs.setup.outputs.version }}
          draft: false
          prerelease: ${{ needs.setup.outputs.prerelease }}
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
  upload_github_release:
    needs: ["setup", "create_github_release"]
    if: ${{ needs.setup.outputs.recheck == 'true' }}
    strategy:
      matrix:
        include:
          - { version: 14, arch: amd64, full_arch: x86_64 }
          - { version: 14, arch: arm64, full_arch: aarch64 }
          - { version: 15, arch: amd64, full_arch: x86_64 }
          - { version: 15, arch: arm64, full_arch: aarch64 }
          - { version: 16, arch: amd64, full_arch: x86_64 }
          - { version: 16, arch: arm64, full_arch: aarch64 }
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-${{ runner.os }}-pg${{ matrix.version }}-${{ hashFiles('./Cargo.lock') }}
          restore-keys: cargo-${{ runner.os }}-pg${{ matrix.version }}
      - uses: mozilla-actions/sccache-action@v0.0.3
      - name: Prepare
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install libpq-dev postgresql-${{ matrix.version }} postgresql-server-dev-${{ matrix.version }}
          cargo install cargo-pgrx --git https://github.com/tensorchord/pgrx.git --rev $(cat Cargo.toml | grep "pgrx =" | awk -F'rev = "' '{print $2}' | cut -d'"' -f1)
          cargo pgrx init --pg${{ matrix.version }}=/usr/lib/postgresql/${{ matrix.version }}/bin/pg_config
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            sudo apt-get -y install crossbuild-essential-arm64
            rustup target add aarch64-unknown-linux-gnu
          fi
      - name: Build Release
        id: build_release
        run: |
          sudo apt-get -y install ruby-dev libarchive-tools
          sudo gem install --no-document fpm
          mkdir ./artifacts
          cargo pgrx package
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            export BINDGEN_EXTRA_CLANG_ARGS_aarch64_unknown_linux_gnu="-target aarch64-unknown-linux-gnu -isystem /usr/aarch64-linux-gnu/include/ -ccc-gcc-name aarch64-linux-gnu-gcc"
            cargo build --target aarch64-unknown-linux-gnu --release --features "pg${{ matrix.version }}" --no-default-features
            mv ./target/aarch64-unknown-linux-gnu/release/libvectors.so ./target/release/vectors-pg${{ matrix.version }}/usr/lib/postgresql/${{ matrix.version }}/lib/vectors.so
          fi
          mv ./target/release/vectors-pg${{ matrix.version }}/usr ./artifacts/usr
          cd artifacts
          fpm \
            --input-type dir \
            --output-type deb \
            --name vectors-pg${{ matrix.version }} \
            --version ${{ needs.setup.outputs.version }} \
            --license apache2 \
            --deb-no-default-config-files \
            --package ../vectors-pg${{ matrix.version }}-${{ needs.setup.outputs.version }}-${{ matrix.full_arch }}-unknown-linux-gnu.deb \
            --architecture ${{ matrix.arch }} \
            .
      - name: Upload Release / DEB
        id: upload_release_deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./vectors-pg${{ matrix.version }}-${{ needs.setup.outputs.version }}-${{ matrix.full_arch }}-unknown-linux-gnu.deb
          asset_name: vectors-pg${{ matrix.version }}-${{ needs.setup.outputs.version }}-${{ matrix.full_arch }}-unknown-linux-gnu.deb
          asset_content_type: application/vnd.debian.binary-package
  docker_binary_release:
    needs: ["setup", "create_github_release", "upload_github_release"]
    if: ${{ needs.setup.outputs.recheck == 'true' }}
    strategy:
      matrix:
        include:
          - { version: 14, arch: amd64, full_arch: x86_64 }
          - { version: 14, arch: arm64, full_arch: aarch64 }
          - { version: 15, arch: amd64, full_arch: x86_64 }
          - { version: 15, arch: arm64, full_arch: aarch64 }
          - { version: 16, arch: amd64, full_arch: x86_64 }
          - { version: 16, arch: arm64, full_arch: aarch64 }
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download
        run: wget -O pgvecto-rs-binary-release.deb https://github.com/tensorchord/pgvecto.rs/releases/download/${{ needs.setup.outputs.version }}/vectors-pg${{ matrix.version }}-${{ needs.setup.outputs.version }}-${{ matrix.full_arch }}-unknown-linux-gnu.deb
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_TOKEN }}
      - name: Push binary release to Docker Registry
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: "linux/${{ matrix.arch }}"
          file: ./docker/binary_release.Dockerfile
          tags: tensorchord/pgvecto-rs-binary:pg${{ matrix.version }}-${{ needs.setup.outputs.version }}-${{ matrix.arch }}
  docker_release:
    needs: ["setup", "create_github_release", "upload_github_release", "docker_binary_release"]
    if: ${{ needs.setup.outputs.recheck == 'true' }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - { version: 14, latest: false }
          - { version: 15, latest: false }
          - { version: 16, latest: true }
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Variables
        id: variables
        uses: actions/github-script@v6
        with:
          script: |
            let tags = [
              "tensorchord/pgvecto-rs:pg${{ matrix.version }}-${{ needs.setup.outputs.version }}",
              "tensorchord/pgvecto-rs:pg${{ matrix.version }}-latest",
            ];
            if ("${{ matrix.latest }}" == "true") {
              tags.push("tensorchord/pgvecto-rs:latest");
            }
            core.setOutput('tags', tags.join(", "));
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_TOKEN }}
      - name: Push postgres with pgvecto.rs to Docker Registry
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: "linux/amd64,linux/arm64"
          file: ./docker/pgvecto-rs.Dockerfile
          build-args: |
            TAG=pg${{ matrix.version }}-${{ needs.setup.outputs.version }}
            POSTGRES_VERSION=${{ matrix.version }}
          tags: ${{ steps.variables.outputs.tags }}
