[package]
name = "vectors"
version.workspace = true
edition.workspace = true

[lib]
crate-type = ["cdylib"]

[features]
default = ["pg15"]
pg12 = ["pgrx/pg12", "pgrx-tests/pg12"]
pg13 = ["pgrx/pg13", "pgrx-tests/pg13"]
pg14 = ["pgrx/pg14", "pgrx-tests/pg14"]
pg15 = ["pgrx/pg15", "pgrx-tests/pg15"]
pg16 = ["pgrx/pg16", "pgrx-tests/pg16"]
pg_test = []

[dependencies]
libc.workspace = true
log.workspace = true
serde.workspace = true
serde_json.workspace = true
validator.workspace = true
rustix.workspace = true
thiserror.workspace = true
byteorder.workspace = true
bincode.workspace = true
half.workspace = true
num-traits.workspace = true
rand.workspace = true
bytemuck.workspace = true
service = { path = "crates/service" }
detect = { path = "crates/detect" }
pgrx = { version = "0.11.2", default-features = false, features = [] }
openai_api_rust = { git = "https://github.com/tensorchord/openai-api.git", rev = "228d54b6002e98257b3c81501a054942342f585f" }
env_logger = "0.10.0"
toml = "0.8.8"

[dev-dependencies]
pgrx-tests = "0.11.2"
httpmock = "0.6"
mockall = "0.12"

[lints]
clippy.too_many_arguments = "allow"
clippy.unnecessary_literal_unwrap = "allow"
clippy.unnecessary_unwrap = "allow"
rust.unsafe_op_in_unsafe_fn = "warn"

[workspace]
resolver = "2"
members = ["crates/*"]

[workspace.package]
version = "0.0.0"
edition = "2021"

[workspace.dependencies]
libc = "~0.2"
log = "~0.4"
serde = "~1.0"
serde_json = "1"
thiserror = "~1.0"
bincode = "~1.3"
byteorder = "~1.5"
bytemuck = { version = "~1.14", features = ["extern_crate_alloc"] }
half = { version = "~2.3", features = [
    "bytemuck",
    "num-traits",
    "serde",
    "use-intrinsics",
] }
num-traits = "~0.2"
validator = { version = "~0.16", features = ["derive"] }
rustix = { version = "~0.38", features = ["fs", "net", "mm"] }
rand = "~0.8"

[profile.dev]
panic = "unwind"

[profile.release]
panic = "unwind"
opt-level = 3
lto = "fat"
codegen-units = 1
debug = true
